{
    "SnippetGroups": [
        {
            "Key": "endpointnamefluent",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .DefineEndpointName(\"MyEndpoint\");",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 12,
                                "Value": "Configure.With()\r\n    .DefineEndpointName(\"MyEndpoint\");",
                                "Key": "endpointnamefluent",
                                "Language": "cs",
                                "File": "\\Snippets_3\\EndpointName.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "endpointnamebyattribute",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "[EndpointName(\"MyEndpointName\")]\r\npublic class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n{\r\n    // ... your custom config",
                            "Source": {
                                "StartRow": 17,
                                "EndRow": 21,
                                "Value": "[EndpointName(\"MyEndpointName\")]\r\npublic class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n{\r\n    // ... your custom config",
                                "Key": "endpointnamebyattribute",
                                "Language": "cs",
                                "File": "\\Snippets_3\\EndpointName.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "endpointnamebynamespace",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "namespace MyServer\r\n{\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n    {\r\n        // ... your custom config",
                            "Source": {
                                "StartRow": 25,
                                "EndRow": 30,
                                "Value": "namespace MyServer\r\n{\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n    {\r\n        // ... your custom config",
                                "Key": "endpointnamebynamespace",
                                "Language": "cs",
                                "File": "\\Snippets_3\\EndpointName.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "handlerorderingwithfluent",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .UnicastBus()\r\n    .LoadMessageHandlers(First<HandlerB>.Then<HandlerA>().AndThen<HandlerC>());",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 13,
                                "Value": "Configure.With()\r\n    .UnicastBus()\r\n    .LoadMessageHandlers(First<HandlerB>.Then<HandlerA>().AndThen<HandlerC>());",
                                "Key": "handlerorderingwithfluent",
                                "Language": "cs",
                                "File": "\\Snippets_3\\HandlerOrdering.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "handlerorderingwithfirst",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySpecifyingFirst : ISpecifyMessageHandlerOrdering\r\n{\r\n    public void SpecifyOrder(Order order)\r\n    {\r\n        order.SpecifyFirst<HandlerB>();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 17,
                                "EndRow": 24,
                                "Value": "public class MySpecifyingFirst : ISpecifyMessageHandlerOrdering\r\n{\r\n    public void SpecifyOrder(Order order)\r\n    {\r\n        order.SpecifyFirst<HandlerB>();\r\n    }\r\n}",
                                "Key": "handlerorderingwithfirst",
                                "Language": "cs",
                                "File": "\\Snippets_3\\HandlerOrdering.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "handlerorderingwithmultiple",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySpecifyingOrder : ISpecifyMessageHandlerOrdering\r\n{\r\n    public void SpecifyOrder(Order order)\r\n    {\r\n        order.Specify(First<HandlerB>.Then<HandlerA>().AndThen<HandlerC>());\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 27,
                                "EndRow": 34,
                                "Value": "public class MySpecifyingOrder : ISpecifyMessageHandlerOrdering\r\n{\r\n    public void SpecifyOrder(Order order)\r\n    {\r\n        order.Specify(First<HandlerB>.Then<HandlerA>().AndThen<HandlerC>());\r\n    }\r\n}",
                                "Key": "handlerorderingwithmultiple",
                                "Language": "cs",
                                "File": "\\Snippets_3\\HandlerOrdering.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "instanceperunitofworkregistration",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = Configure.With();\r\nconfiguration.Configurer.ConfigureComponent<MyService>(DependencyLifecycle.InstancePerCall);",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 12,
                                "Value": "var configuration = Configure.With();\r\nconfiguration.Configurer.ConfigureComponent<MyService>(DependencyLifecycle.InstancePerCall);",
                                "Key": "instanceperunitofworkregistration",
                                "Language": "cs",
                                "File": "\\Snippets_3\\InstancePerUnitOfWorkRegistration.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sendonly",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var bus = Configure.With()\r\n    .DefaultBuilder()\r\n    //Other config\r\n    .UnicastBus()\r\n    .SendOnly();",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 17,
                                "Value": "var bus = Configure.With()\r\n    .DefaultBuilder()\r\n    //Other config\r\n    .UnicastBus()\r\n    .SendOnly();",
                                "Key": "sendonly",
                                "Language": "cs",
                                "File": "\\Snippets_3\\SendOnly.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "callbacktoaccessmessageregistration",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var sync = bus.Send(placeOrder)\r\n    .Register(ar =>\r\n    {\r\n        var localResult = ar.AsyncState as CompletionResult;\r\n        message = localResult.Messages[0] as PlaceOrderResponse;\r\n    }, null);\r\n\r\nsync.AsyncWaitHandle.WaitOne();\r\n// return message;",
                            "Source": {
                                "StartRow": 24,
                                "EndRow": 35,
                                "Value": "var sync = bus.Send(placeOrder)\r\n    .Register(ar =>\r\n    {\r\n        var localResult = ar.AsyncState as CompletionResult;\r\n        message = localResult.Messages[0] as PlaceOrderResponse;\r\n    }, null);\r\n\r\nsync.AsyncWaitHandle.WaitOne();\r\n// return message;",
                                "Key": "callbacktoaccessmessageregistration",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Callback\\Callback.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "triggercallback",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "bus.Return(Status.OK);",
                            "Source": {
                                "StartRow": 49,
                                "EndRow": 52,
                                "Value": "bus.Return(Status.OK);",
                                "Key": "triggercallback",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Callback\\Callback.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "expressmessageconvention",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configure = Configure.With()\r\n    .DefiningExpressMessagesAs(t => t.Name.EndsWith(\"Express\"));",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 12,
                                "Value": "var configure = Configure.With()\r\n    .DefiningExpressMessagesAs(t => t.Name.EndsWith(\"Express\"));",
                                "Key": "expressmessageconvention",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Conventions\\ExpressMessages.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "expressmessageattribute",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "[Express]\r\npublic class MyMessage : IMessage { }",
                            "Source": {
                                "StartRow": 16,
                                "EndRow": 18,
                                "Value": "[Express]\r\npublic class MyMessage : IMessage { }",
                                "Key": "expressmessageattribute",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Conventions\\ExpressMessages.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messageconventions",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// NOTE: When you're self hosting, '.DefiningXXXAs()' has to be before '.UnicastBus()', \r\n// otherwise you'll get: 'System.InvalidOperationException: \"No destination specified for message(s): MessageTypeName\"\r\n\r\nvar configure = Configure.With()\r\n    .DefaultBuilder()\r\n    .DefiningCommandsAs(t => t.Namespace == \"MyNamespace\" && t.Namespace.EndsWith(\"Commands\"))\r\n    .DefiningEventsAs(t => t.Namespace == \"MyNamespace\" && t.Namespace.EndsWith(\"Events\"))\r\n    .DefiningMessagesAs(t => t.Namespace == \"Messages\")\r\n    .DefiningEncryptedPropertiesAs(p => p.Name.StartsWith(\"Encrypted\"))\r\n    .DefiningDataBusPropertiesAs(p => p.Name.EndsWith(\"DataBus\"))\r\n    .DefiningExpressMessagesAs(t => t.Name.EndsWith(\"Express\"))\r\n    .DefiningTimeToBeReceivedAs(t => t.Name.EndsWith(\"Expires\") ? TimeSpan.FromSeconds(30) : TimeSpan.MaxValue);",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 22,
                                "Value": "// NOTE: When you're self hosting, '.DefiningXXXAs()' has to be before '.UnicastBus()', \r\n// otherwise you'll get: 'System.InvalidOperationException: \"No destination specified for message(s): MessageTypeName\"\r\n\r\nvar configure = Configure.With()\r\n    .DefaultBuilder()\r\n    .DefiningCommandsAs(t => t.Namespace == \"MyNamespace\" && t.Namespace.EndsWith(\"Commands\"))\r\n    .DefiningEventsAs(t => t.Namespace == \"MyNamespace\" && t.Namespace.EndsWith(\"Events\"))\r\n    .DefiningMessagesAs(t => t.Namespace == \"Messages\")\r\n    .DefiningEncryptedPropertiesAs(p => p.Name.StartsWith(\"Encrypted\"))\r\n    .DefiningDataBusPropertiesAs(p => p.Name.EndsWith(\"DataBus\"))\r\n    .DefiningExpressMessagesAs(t => t.Name.EndsWith(\"Express\"))\r\n    .DefiningTimeToBeReceivedAs(t => t.Name.EndsWith(\"Expires\") ? TimeSpan.FromSeconds(30) : TimeSpan.MaxValue);",
                                "Key": "messageconventions",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Conventions\\MessageConventions.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configuringdistributor",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// --------------------------------------\r\n// Running the Distributor and a Worker\r\nConfigure.With()\r\n    .AsMasterNode();\r\n//or \r\nConfigure.With()\r\n    .RunDistributor();\r\n// --------------------------------------\r\n\r\n// --------------------------------------\r\n// Running the Distributor only\r\nConfigure.With()\r\n    .RunDistributorWithNoWorkerOnItsEndpoint();\r\n//or\r\nConfigure.With()\r\n    .RunDistributor(false);\r\n// --------------------------------------",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 27,
                                "Value": "// --------------------------------------\r\n// Running the Distributor and a Worker\r\nConfigure.With()\r\n    .AsMasterNode();\r\n//or \r\nConfigure.With()\r\n    .RunDistributor();\r\n// --------------------------------------\r\n\r\n// --------------------------------------\r\n// Running the Distributor only\r\nConfigure.With()\r\n    .RunDistributorWithNoWorkerOnItsEndpoint();\r\n//or\r\nConfigure.With()\r\n    .RunDistributor(false);\r\n// --------------------------------------",
                                "Key": "configuringdistributor",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Distributor\\ConfiguringDistributor.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configuringworker",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .EnlistWithDistributor();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 10,
                                "Value": "Configure.With()\r\n    .EnlistWithDistributor();",
                                "Key": "configuringworker",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Distributor\\ConfiguringWorker.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "encryptionservicesimple",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .RijndaelEncryptionService();",
                            "Source": {
                                "StartRow": 12,
                                "EndRow": 14,
                                "Value": "Configure.With()\r\n    .RijndaelEncryptionService();",
                                "Key": "encryptionservicesimple",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "definingencryptedpropertiesas",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .DefiningEncryptedPropertiesAs(info => info.Name.EndsWith(\"EncryptedProperty\"));",
                            "Source": {
                                "StartRow": 19,
                                "EndRow": 21,
                                "Value": "Configure.With()\r\n    .DefiningEncryptedPropertiesAs(info => info.Name.EndsWith(\"EncryptedProperty\"));",
                                "Key": "definingencryptedpropertiesas",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messageforencryptionconvention",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyMessage1 : IMessage\r\n{\r\n    public string MyEncryptedProperty { get; set; }\r\n}",
                            "Source": {
                                "StartRow": 25,
                                "EndRow": 29,
                                "Value": "public class MyMessage1 : IMessage\r\n{\r\n    public string MyEncryptedProperty { get; set; }\r\n}",
                                "Key": "messageforencryptionconvention",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messagewithencryptedproperty",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyMessage2 : IMessage\r\n{\r\n    public WireEncryptedString MyEncryptedProperty { get; set; }\r\n}",
                            "Source": {
                                "StartRow": 32,
                                "EndRow": 36,
                                "Value": "public class MyMessage2 : IMessage\r\n{\r\n    public WireEncryptedString MyEncryptedProperty { get; set; }\r\n}",
                                "Key": "messagewithencryptedproperty",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "encryptionfromiprovideconfiguration",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class ConfigureEncryption : \r\n    IProvideConfiguration<RijndaelEncryptionServiceConfig>\r\n{\r\n    public RijndaelEncryptionServiceConfig GetConfiguration()\r\n    {\r\n        return new RijndaelEncryptionServiceConfig\r\n        {\r\n            Key = \"gdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\",\r\n            ExpiredKeys = new RijndaelExpiredKeyCollection\r\n            \t\t{\r\n                \t\tnew RijndaelExpiredKey\r\n                \t\t{\r\n                \t\t    Key = \"abDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                \t\t},\r\n\t\t                    new RijndaelExpiredKey\r\n\t\t                    {\r\n\t\t                        Key = \"cdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n\t\t                    }\r\n\t\t\t\t\t\t}\r\n        };\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 39,
                                "EndRow": 62,
                                "Value": "public class ConfigureEncryption : \r\n    IProvideConfiguration<RijndaelEncryptionServiceConfig>\r\n{\r\n    public RijndaelEncryptionServiceConfig GetConfiguration()\r\n    {\r\n        return new RijndaelEncryptionServiceConfig\r\n        {\r\n            Key = \"gdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\",\r\n            ExpiredKeys = new RijndaelExpiredKeyCollection\r\n            \t\t{\r\n                \t\tnew RijndaelExpiredKey\r\n                \t\t{\r\n                \t\t    Key = \"abDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                \t\t},\r\n\t\t                    new RijndaelExpiredKey\r\n\t\t                    {\r\n\t\t                        Key = \"cdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n\t\t                    }\r\n\t\t\t\t\t\t}\r\n        };\r\n    }\r\n}",
                                "Key": "encryptionfromiprovideconfiguration",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "encryptionfromiencryptionservice",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "//where MyCustomEncryptionService implements IEncryptionService \r\nConfigure.With()\r\n    .Configurer.RegisterSingleton<IEncryptionService>(new MyCustomEncryptionService());",
                            "Source": {
                                "StartRow": 67,
                                "EndRow": 70,
                                "Value": "//where MyCustomEncryptionService implements IEncryptionService \r\nConfigure.With()\r\n    .Configurer.RegisterSingleton<IEncryptionService>(new MyCustomEncryptionService());",
                                "Key": "encryptionfromiencryptionservice",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "gatewayconfiguration",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.Instance.RunGateway();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 11,
                                "Value": "Configure.Instance.RunGateway();",
                                "Key": "gatewayconfiguration",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Gateway\\GatewayConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sendtosites",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Bus.SendToSites(new[] { \"SiteA\", \"SiteB\" }, new MyCrossSiteMessage());",
                            "Source": {
                                "StartRow": 16,
                                "EndRow": 19,
                                "Value": "Bus.SendToSites(new[] { \"SiteA\", \"SiteB\" }, new MyCrossSiteMessage());",
                                "Key": "sendtosites",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Gateway\\GatewayConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-incoming-mutator",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleIncomingMutator : IMutateIncomingTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 17,
                                "Value": "public class SampleIncomingMutator : IMutateIncomingTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                                "Key": "header-incoming-mutator",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-outgoing-mutator",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleOutgoingMutator : IMutateOutgoingTransportMessages\r\n{\r\n    public void MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 19,
                                "EndRow": 27,
                                "Value": "public class SampleOutgoingMutator : IMutateOutgoingTransportMessages\r\n{\r\n    public void MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                                "Key": "header-outgoing-mutator",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-incoming-handler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleReadHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.CurrentMessageContext.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 29,
                                "EndRow": 40,
                                "Value": "public class SampleReadHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.CurrentMessageContext.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                                "Key": "header-incoming-handler",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-outgoing-handler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleWriteHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.OutgoingHeaders;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 42,
                                "EndRow": 52,
                                "Value": "public class SampleWriteHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.OutgoingHeaders;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                                "Key": "header-outgoing-handler",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messagewithtostringlogged",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MessageToLog : IMessage\r\n{\r\n    public Guid EventId { get; set; }\r\n    public DateTime? Time { get; set; }\r\n    public TimeSpan Duration { get; set; }\r\n\r\n    public override string ToString()\r\n    {\r\n        return string.Format(\r\n            \"MyMessage: EventId={0}, Time={1}, Duration={2}\",\r\n            EventId, Time, Duration\r\n            );\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 5,
                                "EndRow": 21,
                                "Value": "public class MessageToLog : IMessage\r\n{\r\n    public Guid EventId { get; set; }\r\n    public DateTime? Time { get; set; }\r\n    public TimeSpan Duration { get; set; }\r\n\r\n    public override string ToString()\r\n    {\r\n        return string.Format(\r\n            \"MyMessage: EventId={0}, Time={1}, Duration={2}\",\r\n            EventId, Time, Duration\r\n            );\r\n    }\r\n}",
                                "Key": "messagewithtostringlogged",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Logging\\MessageToLog.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "loggingconfigwithprofile",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class YourProfileLoggingHandler : \r\n    IConfigureLoggingForProfile<YourProfile>\r\n{\r\n    public void Configure(IConfigureThisEndpoint specifier)\r\n    {\r\n        // setup your logging infrastructure then call\r\n        SetLoggingLibrary.Log4Net();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 6,
                                "EndRow": 17,
                                "Value": "public class YourProfileLoggingHandler : \r\n    IConfigureLoggingForProfile<YourProfile>\r\n{\r\n    public void Configure(IConfigureThisEndpoint specifier)\r\n    {\r\n        // setup your logging infrastructure then call\r\n        SetLoggingLibrary.Log4Net();\r\n    }\r\n}",
                                "Key": "loggingconfigwithprofile",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Logging\\OverrideViaProfile.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "usinglogging",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "using log4net;\r\n\r\npublic class ClassUsingLogging\r\n{\r\n    public void SomeMethod()\r\n    {\r\n        //your code\r\n        Logger.Debug(\"Something interesting happened.\");\r\n    }\r\n    static ILog Logger = LogManager.GetLogger(\"Name\");\r\n}",
                            "Source": {
                                "StartRow": 2,
                                "EndRow": 13,
                                "Value": "using log4net;\r\n\r\npublic class ClassUsingLogging\r\n{\r\n    public void SomeMethod()\r\n    {\r\n        //your code\r\n        Logger.Debug(\"Something interesting happened.\");\r\n    }\r\n    static ILog Logger = LogManager.GetLogger(\"Name\");\r\n}",
                                "Key": "usinglogging",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Logging\\UsingLogging.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "log4netfiltering",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var appender = new ColoredConsoleAppender\r\n{\r\n    Threshold = Level.Debug,\r\n    Layout = new SimpleLayout(),\r\n};\r\n\r\nappender.AddFilter(new LoggerMatchFilter\r\n                   {\r\n                       LoggerToMatch = \"MyNamespace\"\r\n                   });\r\nappender.AddFilter(new DenyAllFilter());\r\nappender.ActivateOptions();\r\n\r\nBasicConfigurator.Configure(appender);\r\n\r\nSetLoggingLibrary.Log4Net();",
                            "Source": {
                                "StartRow": 14,
                                "EndRow": 32,
                                "Value": "var appender = new ColoredConsoleAppender\r\n{\r\n    Threshold = Level.Debug,\r\n    Layout = new SimpleLayout(),\r\n};\r\n\r\nappender.AddFilter(new LoggerMatchFilter\r\n                   {\r\n                       LoggerToMatch = \"MyNamespace\"\r\n                   });\r\nappender.AddFilter(new DenyAllFilter());\r\nappender.ActivateOptions();\r\n\r\nBasicConfigurator.Configure(appender);\r\n\r\nSetLoggingLibrary.Log4Net();",
                                "Key": "log4netfiltering",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Logging\\Log4Net\\Log4NetFiltering.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configuringnhibernate",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n            .DefaultBuilder()\r\n            .NHibernateSagaPersister()\r\n            .UseNHibernateTimeoutPersister()\r\n            .DBSubcriptionStorage();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 15,
                                "Value": "Configure.With()\r\n            .DefaultBuilder()\r\n            .NHibernateSagaPersister()\r\n            .UseNHibernateTimeoutPersister()\r\n            .DBSubcriptionStorage();",
                                "Key": "configuringnhibernate",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Persistence\\NHibernate\\ConfiguringNHibernate.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-with-started-by",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(s => s.SomeID, m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        // code to handle Message1\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 32,
                                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(s => s.SomeID, m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        // code to handle Message1\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                                "Key": "saga-with-started-by",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-with-started-by-and-correlation-id-set",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(s => s.SomeID, m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 38,
                                "EndRow": 59,
                                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(s => s.SomeID, m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                                "Key": "saga-with-started-by-and-correlation-id-set",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scheduletask",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// 'Schedule' is a static class that can be accessed anywhere. \r\n// To send a message every 5 minutes\r\nSchedule.Every(TimeSpan.FromMinutes(5))\r\n    .Action(() => bus.Send(new CallLegacySystem()));\r\n\r\n// Name a schedule task and invoke it every 5 minutes\r\nSchedule.Every(TimeSpan.FromMinutes(5))\r\n    .Action(\"Task name\", SomeCustomMethod);",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 20,
                                "Value": "// 'Schedule' is a static class that can be accessed anywhere. \r\n// To send a message every 5 minutes\r\nSchedule.Every(TimeSpan.FromMinutes(5))\r\n    .Action(() => bus.Send(new CallLegacySystem()));\r\n\r\n// Name a schedule task and invoke it every 5 minutes\r\nSchedule.Every(TimeSpan.FromMinutes(5))\r\n    .Action(\"Task name\", SomeCustomMethod);",
                                "Key": "scheduletask",
                                "Language": "cs",
                                "File": "\\Snippets_3\\Scheduling\\Scheduling.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "secondlevelretriesdisable",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.Instance.DisableSecondLevelRetries();",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 14,
                                "Value": "Configure.Instance.DisableSecondLevelRetries();",
                                "Key": "secondlevelretriesdisable",
                                "Language": "cs",
                                "File": "\\Snippets_3\\SecondLevelRetries\\SecondLevelRetriesConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "secondlevelretriescustompolicy",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "SecondLevelRetries.RetryPolicy = MyCustomRetryPolicy;",
                            "Source": {
                                "StartRow": 17,
                                "EndRow": 20,
                                "Value": "SecondLevelRetries.RetryPolicy = MyCustomRetryPolicy;",
                                "Key": "secondlevelretriescustompolicy",
                                "Language": "cs",
                                "File": "\\Snippets_3\\SecondLevelRetries\\SecondLevelRetriesConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "secondlevelretriescustompolicyhandler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "TimeSpan MyCustomRetryPolicy(TransportMessage message)\r\n{\r\n    // retry max 3 times\r\n    if (GetNumberOfRetries(message) >= 3)\r\n    {\r\n        // sending back a TimeSpan.MinValue tells the \r\n        // SecondLevelRetry not to retry this message\r\n        return TimeSpan.MinValue;\r\n    }\r\n\r\n    return TimeSpan.FromSeconds(5);\r\n}\r\n\r\nstatic int GetNumberOfRetries(TransportMessage message)\r\n{\r\n    string value;\r\n    if (message.Headers.TryGetValue(Headers.Retries, out value))\r\n    {\r\n        int i;\r\n        if (int.TryParse(value, out i))\r\n        {\r\n            return i;\r\n        }\r\n    }\r\n    return 0;\r\n}",
                            "Source": {
                                "StartRow": 24,
                                "EndRow": 50,
                                "Value": "TimeSpan MyCustomRetryPolicy(TransportMessage message)\r\n{\r\n    // retry max 3 times\r\n    if (GetNumberOfRetries(message) >= 3)\r\n    {\r\n        // sending back a TimeSpan.MinValue tells the \r\n        // SecondLevelRetry not to retry this message\r\n        return TimeSpan.MinValue;\r\n    }\r\n\r\n    return TimeSpan.FromSeconds(5);\r\n}\r\n\r\nstatic int GetNumberOfRetries(TransportMessage message)\r\n{\r\n    string value;\r\n    if (message.Headers.TryGetValue(Headers.Retries, out value))\r\n    {\r\n        int i;\r\n        if (int.TryParse(value, out i))\r\n        {\r\n            return i;\r\n        }\r\n    }\r\n    return 0;\r\n}",
                                "Key": "secondlevelretriescustompolicyhandler",
                                "Language": "cs",
                                "File": "\\Snippets_3\\SecondLevelRetries\\SecondLevelRetriesConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "busextensionmethodforhandler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyHandler : IHandleMessages<MyMessage>\r\n{\r\n    public void Handle(MyMessage message)\r\n    {\r\n        this.Bus().Reply(new OtherMessage());\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 6,
                                "EndRow": 13,
                                "Value": "public class MyHandler : IHandleMessages<MyMessage>\r\n{\r\n    public void Handle(MyMessage message)\r\n    {\r\n        this.Bus().Reply(new OtherMessage());\r\n    }\r\n}",
                                "Key": "busextensionmethodforhandler",
                                "Language": "cs",
                                "File": "\\Snippets_4\\BusExtensionMethodForHandler.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customcontainers",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public void CustomContainerUsage()\r\n{\r\n    //Call 'Configure.UsingContainer<T>()' in your configuration\r\n    Configure.With()\r\n        .UsingContainer<MyCustomObjectBuilder>();\r\n}\r\n\r\n//Create a class that implements 'IContainer'\r\npublic class MyCustomObjectBuilder : IContainer\r\n{",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 20,
                                "Value": "public void CustomContainerUsage()\r\n{\r\n    //Call 'Configure.UsingContainer<T>()' in your configuration\r\n    Configure.With()\r\n        .UsingContainer<MyCustomObjectBuilder>();\r\n}\r\n\r\n//Create a class that implements 'IContainer'\r\npublic class MyCustomObjectBuilder : IContainer\r\n{",
                                "Key": "customcontainers",
                                "Language": "cs",
                                "File": "\\Snippets_4\\ContainerCustom.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "containers",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// Autofac\r\nConfigure.With()\r\n    .UsingContainer<AutofacObjectBuilder>();\r\n\r\n// Ninject\r\nConfigure.With()\r\n    .UsingContainer<NinjectObjectBuilder>();\r\n\r\n// Unity\r\nConfigure.With()\r\n    .UsingContainer<UnityObjectBuilder>();\r\n\r\n// Spring\r\nConfigure.With()\r\n    .UsingContainer<SpringObjectBuilder>();\r\n\r\n// StructureMap\r\nConfigure.With()\r\n    .UsingContainer<StructureMapObjectBuilder>();",
                            "Source": {
                                "StartRow": 14,
                                "EndRow": 35,
                                "Value": "// Autofac\r\nConfigure.With()\r\n    .UsingContainer<AutofacObjectBuilder>();\r\n\r\n// Ninject\r\nConfigure.With()\r\n    .UsingContainer<NinjectObjectBuilder>();\r\n\r\n// Unity\r\nConfigure.With()\r\n    .UsingContainer<UnityObjectBuilder>();\r\n\r\n// Spring\r\nConfigure.With()\r\n    .UsingContainer<SpringObjectBuilder>();\r\n\r\n// StructureMap\r\nConfigure.With()\r\n    .UsingContainer<StructureMapObjectBuilder>();",
                                "Key": "containers",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Containers.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "definecriticalerroraction",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// Configuring how NServicebus handles critical errors\r\nConfigure.With().DefineCriticalErrorAction((message, exception) =>\r\n{\r\n    var output = string.Format(\"We got a critical exception: '{0}'\\r\\n{1}\", message, exception);\r\n    Console.WriteLine(output);\r\n    // Perhaps end the process??\r\n});",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 19,
                                "Value": "// Configuring how NServicebus handles critical errors\r\nConfigure.With().DefineCriticalErrorAction((message, exception) =>\r\n{\r\n    var output = string.Format(\"We got a critical exception: '{0}'\\r\\n{1}\", message, exception);\r\n    Console.WriteLine(output);\r\n    // Perhaps end the process??\r\n});",
                                "Key": "definecriticalerroraction",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CriticalError.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "raisecriticalerror",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// Configuring how NServicebus handles critical errors\r\nConfigure.With().RaiseCriticalError(\"The message\", theException);",
                            "Source": {
                                "StartRow": 26,
                                "EndRow": 30,
                                "Value": "// Configuring how NServicebus handles critical errors\r\nConfigure.With().RaiseCriticalError(\"The message\", theException);",
                                "Key": "raisecriticalerror",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CriticalError.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customconfigoverrides",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configure = Configure.With(AllAssemblies.Except(\"NotThis.dll\"))\r\n    .DefaultBuilder();\r\nconfigure.DefineEndpointName(\"MyEndpointName\");\r\nconfigure.DefiningEventsAs(type => type.Name.EndsWith(\"Event\"));",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 14,
                                "Value": "var configure = Configure.With(AllAssemblies.Except(\"NotThis.dll\"))\r\n    .DefaultBuilder();\r\nconfigure.DefineEndpointName(\"MyEndpointName\");\r\nconfigure.DefiningEventsAs(type => type.Name.EndsWith(\"Event\"));",
                                "Key": "customconfigoverrides",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CustomConfigOverrides.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "registercustomconfigsource",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    //this call needs to happen right after With()\r\n    .CustomConfigurationSource(new MyCustomConfigurationSource()); ",
                            "Source": {
                                "StartRow": 12,
                                "EndRow": 17,
                                "Value": "Configure.With()\r\n    //this call needs to happen right after With()\r\n    .CustomConfigurationSource(new MyCustomConfigurationSource()); ",
                                "Key": "registercustomconfigsource",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CustomConfigSource.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customconfigsource",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyCustomConfigurationSource : IConfigurationSource\r\n{\r\n    public T GetConfiguration<T>() where T : class, new()\r\n    {\r\n        // the part you are overriding\r\n        if (typeof(T) == typeof(RijndaelEncryptionServiceConfig))\r\n        {\r\n            return new RijndaelEncryptionServiceConfig\r\n                   {\r\n                       Key = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                   } as T;\r\n        }\r\n        // leaving the rest of the configuration as is:\r\n        return ConfigurationManager.GetSection(typeof(T).Name) as T;\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 22,
                                "EndRow": 40,
                                "Value": "public class MyCustomConfigurationSource : IConfigurationSource\r\n{\r\n    public T GetConfiguration<T>() where T : class, new()\r\n    {\r\n        // the part you are overriding\r\n        if (typeof(T) == typeof(RijndaelEncryptionServiceConfig))\r\n        {\r\n            return new RijndaelEncryptionServiceConfig\r\n                   {\r\n                       Key = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                   } as T;\r\n        }\r\n        // leaving the rest of the configuration as is:\r\n        return ConfigurationManager.GetSection(typeof(T).Name) as T;\r\n    }\r\n}",
                                "Key": "customconfigsource",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CustomConfigSource.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customconfigprovider",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class CustomRijndaelEncryptionServiceConfigProvider : IProvideConfiguration<RijndaelEncryptionServiceConfig>\r\n{\r\n    public RijndaelEncryptionServiceConfig GetConfiguration()\r\n    {\r\n        return new RijndaelEncryptionServiceConfig\r\n               {\r\n                   Key = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n               };\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 43,
                                "EndRow": 55,
                                "Value": "class CustomRijndaelEncryptionServiceConfigProvider : IProvideConfiguration<RijndaelEncryptionServiceConfig>\r\n{\r\n    public RijndaelEncryptionServiceConfig GetConfiguration()\r\n    {\r\n        return new RijndaelEncryptionServiceConfig\r\n               {\r\n                   Key = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n               };\r\n    }\r\n}",
                                "Key": "customconfigprovider",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CustomConfigSource.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customravenconfig",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With().RavenPersistence(\"http://localhost:8080\", \"MyDatabase\");",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 10,
                                "Value": "Configure.With().RavenPersistence(\"http://localhost:8080\", \"MyDatabase\");",
                                "Key": "customravenconfig",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CustomRavenConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "oldravendbpersistenceinitialization",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n   .DefaultBuilder()\r\n   .RavenPersistence()\r\n   .RavenSagaPersister()\r\n   .RavenSubscriptionStorage()\r\n   .UseRavenTimeoutPersister()\r\n   .UseRavenGatewayDeduplication()\r\n   .UseRavenGatewayPersister();",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 20,
                                "Value": "Configure.With()\r\n   .DefaultBuilder()\r\n   .RavenPersistence()\r\n   .RavenSagaPersister()\r\n   .RavenSubscriptionStorage()\r\n   .UseRavenTimeoutPersister()\r\n   .UseRavenGatewayDeduplication()\r\n   .UseRavenGatewayPersister();",
                                "Key": "oldravendbpersistenceinitialization",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CustomRavenConfigForVersion2_5.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "version2_5ravendbpersistenceinitialization",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n   .DefaultBuilder()\r\n   .RavenDBStorage() // Need to call this method\r\n   .UseRavenDBSagaStorage() // Call this method to use Raven saga storage\r\n   .UseRavenDBSubscriptionStorage() // Call this method to use Raven subscription storage\r\n   .UseRavenDBTimeoutStorage() // Call this method to use Raven timeout storage\r\n   .UseRavenDBGatewayDeduplicationStorage() // Call this method to use Raven deduplication storage for the Gateway\r\n   .UseRavenDBGatewayStorage(); // Call this method to use the  Raven Gateway storage method",
                            "Source": {
                                "StartRow": 29,
                                "EndRow": 38,
                                "Value": "Configure.With()\r\n   .DefaultBuilder()\r\n   .RavenDBStorage() // Need to call this method\r\n   .UseRavenDBSagaStorage() // Call this method to use Raven saga storage\r\n   .UseRavenDBSubscriptionStorage() // Call this method to use Raven subscription storage\r\n   .UseRavenDBTimeoutStorage() // Call this method to use Raven timeout storage\r\n   .UseRavenDBGatewayDeduplicationStorage() // Call this method to use Raven deduplication storage for the Gateway\r\n   .UseRavenDBGatewayStorage(); // Call this method to use the  Raven Gateway storage method",
                                "Key": "version2_5ravendbpersistenceinitialization",
                                "Language": "cs",
                                "File": "\\Snippets_4\\CustomRavenConfigForVersion2_5.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "discardingoldmessageswithanattribute",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "[TimeToBeReceived(\"00:01:00\")] // Discard after one minute\r\npublic class MyMessage { }",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 10,
                                "Value": "[TimeToBeReceived(\"00:01:00\")] // Discard after one minute\r\npublic class MyMessage { }",
                                "Key": "discardingoldmessageswithanattribute",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DiscardingOldMessages.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "discardingoldmessageswithfluent",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configure = Configure.With()\r\n    .DefiningTimeToBeReceivedAs(type =>\r\n    {\r\n        if (type == typeof(MyMessage))\r\n        {\r\n            return TimeSpan.FromHours(1);\r\n        }\r\n        return TimeSpan.MaxValue;\r\n    });",
                            "Source": {
                                "StartRow": 15,
                                "EndRow": 26,
                                "Value": "var configure = Configure.With()\r\n    .DefiningTimeToBeReceivedAs(type =>\r\n    {\r\n        if (type == typeof(MyMessage))\r\n        {\r\n            return TimeSpan.FromHours(1);\r\n        }\r\n        return TimeSpan.MaxValue;\r\n    });",
                                "Key": "discardingoldmessageswithfluent",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DiscardingOldMessages.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "donotcreatequeues",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With().DoNotCreateQueues();",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 10,
                                "Value": "Configure.With().DoNotCreateQueues();",
                                "Key": "donotcreatequeues",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DoNotCreateQueues.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "installers",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .UnicastBus()\r\n    .CreateBus()\r\n    .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 15,
                                "Value": "Configure.With()\r\n    .UnicastBus()\r\n    .CreateBus()\r\n    .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());",
                                "Key": "installers",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Installers.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "unitofworkimplementation",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyUnitOfWork : IManageUnitsOfWork\r\n{\r\n    public void Begin()\r\n    {\r\n        // Do your custom work here\r\n    }\r\n\r\n    public void End(System.Exception ex = null)\r\n    {\r\n        // Do your custom work here\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 18,
                                "EndRow": 31,
                                "Value": "public class MyUnitOfWork : IManageUnitsOfWork\r\n{\r\n    public void Begin()\r\n    {\r\n        // Do your custom work here\r\n    }\r\n\r\n    public void End(System.Exception ex = null)\r\n    {\r\n        // Do your custom work here\r\n    }\r\n}",
                                "Key": "unitofworkimplementation",
                                "Language": "cs",
                                "File": "\\Snippets_4\\InstancePerUnitOfWorkRegistration.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "interfacemessagecreation",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var message = Bus.CreateInstance<MyInterfaceMessage>(o =>\r\n{\r\n    o.OrderNumber = 1234;\r\n});\r\nBus.Publish(message);\r\n\r\nBus.Publish<MyInterfaceMessage>(o =>\r\n{\r\n    o.OrderNumber = 1234;\r\n});",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 23,
                                "Value": "var message = Bus.CreateInstance<MyInterfaceMessage>(o =>\r\n{\r\n    o.OrderNumber = 1234;\r\n});\r\nBus.Publish(message);\r\n\r\nBus.Publish<MyInterfaceMessage>(o =>\r\n{\r\n    o.OrderNumber = 1234;\r\n});",
                                "Key": "interfacemessagecreation",
                                "Language": "cs",
                                "File": "\\Snippets_4\\InterfaceMessageCreation.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "license",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With().LicensePath(\"PathToLicense\");\r\n//or\r\nConfigure.With().License(\"YourCustomLicenseText\");",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 12,
                                "Value": "Configure.With().LicensePath(\"PathToLicense\");\r\n//or\r\nConfigure.With().License(\"YourCustomLicenseText\");",
                                "Key": "license",
                                "Language": "cs",
                                "File": "\\Snippets_4\\License.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "performancemonitoring",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .EnablePerformanceCounters();\r\n\r\nConfigure.With()\r\n    .SetEndpointSLA(TimeSpan.FromMinutes(3));",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 16,
                                "Value": "Configure.With()\r\n    .EnablePerformanceCounters();\r\n\r\nConfigure.With()\r\n    .SetEndpointSLA(TimeSpan.FromMinutes(3));",
                                "Key": "performancemonitoring",
                                "Language": "cs",
                                "File": "\\Snippets_4\\PerformanceMonitoring.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configurepersistence",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// Configure to use InMemory \r\nConfigure.With().InMemorySagaPersister();\r\nConfigure.With().UseInMemoryTimeoutPersister();\r\nConfigure.With().InMemorySubscriptionStorage();\r\nConfigure.With().RunGatewayWithInMemoryPersistence();\r\nConfigure.With().UseInMemoryGatewayDeduplication();\r\n\r\n// Configure to use NHibernate\r\nConfigure.With().UseNHibernateSagaPersister();\r\nConfigure.With().UseNHibernateTimeoutPersister();\r\nConfigure.With().UseNHibernateSubscriptionPersister();\r\nConfigure.With().UseNHibernateGatewayPersister();\r\nConfigure.With().UseNHibernateGatewayDeduplication();\r\n\r\n// Configure to use RavenDB for everything\r\nConfigure.With().RavenPersistence();\r\n\r\n// Configure to use RavenDB\r\nConfigure.With().RavenSagaPersister();\r\nConfigure.With().UseRavenTimeoutPersister();\r\nConfigure.With().RavenSubscriptionStorage();\r\nConfigure.With().RunGatewayWithRavenPersistence();\r\nConfigure.With().UseNHibernateGatewayDeduplication();",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 35,
                                "Value": "// Configure to use InMemory \r\nConfigure.With().InMemorySagaPersister();\r\nConfigure.With().UseInMemoryTimeoutPersister();\r\nConfigure.With().InMemorySubscriptionStorage();\r\nConfigure.With().RunGatewayWithInMemoryPersistence();\r\nConfigure.With().UseInMemoryGatewayDeduplication();\r\n\r\n// Configure to use NHibernate\r\nConfigure.With().UseNHibernateSagaPersister();\r\nConfigure.With().UseNHibernateTimeoutPersister();\r\nConfigure.With().UseNHibernateSubscriptionPersister();\r\nConfigure.With().UseNHibernateGatewayPersister();\r\nConfigure.With().UseNHibernateGatewayDeduplication();\r\n\r\n// Configure to use RavenDB for everything\r\nConfigure.With().RavenPersistence();\r\n\r\n// Configure to use RavenDB\r\nConfigure.With().RavenSagaPersister();\r\nConfigure.With().UseRavenTimeoutPersister();\r\nConfigure.With().RavenSubscriptionStorage();\r\nConfigure.With().RunGatewayWithRavenPersistence();\r\nConfigure.With().UseNHibernateGatewayDeduplication();",
                                "Key": "configurepersistence",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Persistence.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "purgeonstartup",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .PurgeOnStartup(true);",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 12,
                                "Value": "Configure.With()\r\n    .PurgeOnStartup(true);",
                                "Key": "purgeonstartup",
                                "Language": "cs",
                                "File": "\\Snippets_4\\PurgeOnStartup.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "runcustomaction",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With().UnicastBus()\r\n    .RunCustomAction(MyCustomAction)\r\n    .CreateBus()\r\n    .Start();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 14,
                                "Value": "Configure.With().UnicastBus()\r\n    .RunCustomAction(MyCustomAction)\r\n    .CreateBus()\r\n    .Start();",
                                "Key": "runcustomaction",
                                "Language": "cs",
                                "File": "\\Snippets_4\\RunCustomAction.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configurehowtofindsaga",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySaga : Saga<MySagaData>,\r\n    IAmStartedByMessages<Message1>,\r\n    IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(m => m.SomeID)\r\n            .ToSaga(s => s.SomeID);\r\n    }",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 17,
                                "Value": "public class MySaga : Saga<MySagaData>,\r\n    IAmStartedByMessages<Message1>,\r\n    IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(m => m.SomeID)\r\n            .ToSaga(s => s.SomeID);\r\n    }",
                                "Key": "configurehowtofindsaga",
                                "Language": "cs",
                                "File": "\\Snippets_4\\SagaMapping.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scheduler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class ScheduleMyTasks : IWantToRunWhenBusStartsAndStops\r\n{\r\n    IBus bus;\r\n\r\n    public ScheduleMyTasks(IBus bus)\r\n    {\r\n        this.bus = bus;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        // To send a message every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action(() => bus.SendLocal(new MyMessage()));\r\n\r\n        // Name a schedule task and invoke it every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action(\"Task name\", () => bus.SendLocal(new MyMessage()));\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 7,
                                "EndRow": 32,
                                "Value": "public class ScheduleMyTasks : IWantToRunWhenBusStartsAndStops\r\n{\r\n    IBus bus;\r\n\r\n    public ScheduleMyTasks(IBus bus)\r\n    {\r\n        this.bus = bus;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        // To send a message every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action(() => bus.SendLocal(new MyMessage()));\r\n\r\n        // Name a schedule task and invoke it every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action(\"Task name\", () => bus.SendLocal(new MyMessage()));\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n    }\r\n}",
                                "Key": "scheduler",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scheduler.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configureserialization",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.Serialization.Binary();\r\nConfigure.Serialization.Bson();\r\nConfigure.Serialization.Json();\r\nConfigure.Serialization.Xml();",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 16,
                                "Value": "Configure.Serialization.Binary();\r\nConfigure.Serialization.Bson();\r\nConfigure.Serialization.Json();\r\nConfigure.Serialization.Xml();",
                                "Key": "configureserialization",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Serialization.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "startupaction",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With().UnicastBus()\r\n    .CreateBus()\r\n    .Start(MyStartupAction);",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 13,
                                "Value": "Configure.With().UnicastBus()\r\n    .CreateBus()\r\n    .Start(MyStartupAction);",
                                "Key": "startupaction",
                                "Language": "cs",
                                "File": "\\Snippets_4\\StartupAction.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "staticconfigureendpoint",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.Endpoint.AsSendOnly();\r\nConfigure.Endpoint.AsVolatile();\r\nConfigure.Endpoint.Advanced(settings => settings.DisableDurableMessages());\r\nConfigure.Endpoint.Advanced(settings => settings.EnableDurableMessages());",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 14,
                                "Value": "Configure.Endpoint.AsSendOnly();\r\nConfigure.Endpoint.AsVolatile();\r\nConfigure.Endpoint.Advanced(settings => settings.DisableDurableMessages());\r\nConfigure.Endpoint.Advanced(settings => settings.EnableDurableMessages());",
                                "Key": "staticconfigureendpoint",
                                "Language": "cs",
                                "File": "\\Snippets_4\\StaticConfigureEndpoint.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "disableautosubscribe",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.Features.Disable<AutoSubscribe>();",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 12,
                                "Value": "Configure.Features.Disable<AutoSubscribe>();",
                                "Key": "disableautosubscribe",
                                "Language": "cs",
                                "File": "\\Snippets_4\\SubscriptionSettings.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "transactionconfig",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "//Enable\r\nConfigure.Transactions.Enable();\r\n\r\n// Disable\r\nConfigure.Transactions.Disable();",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 16,
                                "Value": "//Enable\r\nConfigure.Transactions.Enable();\r\n\r\n// Disable\r\nConfigure.Transactions.Disable();",
                                "Key": "transactionconfig",
                                "Language": "cs",
                                "File": "\\Snippets_4\\TransactionConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configuretransports",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// Configure to use MSMQ \r\nConfigure.With().UseTransport<Msmq>();\r\n\r\n// Configure to use AzureStorageQueue\r\nConfigure.With().UseTransport<AzureStorageQueue>();\r\n\r\n// Configure to use AzureServiceBus\r\nConfigure.With().UseTransport<AzureServiceBus>();\r\n\r\n// Configure to use SqlServer\r\nConfigure.With().UseTransport<SqlServer>();",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 22,
                                "Value": "// Configure to use MSMQ \r\nConfigure.With().UseTransport<Msmq>();\r\n\r\n// Configure to use AzureStorageQueue\r\nConfigure.With().UseTransport<AzureStorageQueue>();\r\n\r\n// Configure to use AzureServiceBus\r\nConfigure.With().UseTransport<AzureServiceBus>();\r\n\r\n// Configure to use SqlServer\r\nConfigure.With().UseTransport<SqlServer>();",
                                "Key": "configuretransports",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Transports.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "unobtrusiveconventionsfaqerror",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": ".DefiningMessagesAs(t => \r\n    t.Namespace != null && \r\n    t.Namespace.EndsWith(\"Messages\"));",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 15,
                                "Value": ".DefiningMessagesAs(t => \r\n    t.Namespace != null && \r\n    t.Namespace.EndsWith(\"Messages\"));",
                                "Key": "unobtrusiveconventionsfaqerror",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Conventions\\FaqUnobtrusiveConventions.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "unobtrusiveconventionsfaqfix",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": ".DefiningMessagesAs(t =>\r\n    t.Namespace != null &&\r\n    t.Namespace.StartsWith(\"MyCompany\") &&\r\n    t.Namespace.EndsWith(\"Messages\"));",
                            "Source": {
                                "StartRow": 20,
                                "EndRow": 26,
                                "Value": ".DefiningMessagesAs(t =>\r\n    t.Namespace != null &&\r\n    t.Namespace.StartsWith(\"MyCompany\") &&\r\n    t.Namespace.EndsWith(\"Messages\"));",
                                "Key": "unobtrusiveconventionsfaqfix",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Conventions\\FaqUnobtrusiveConventions.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "unobtrusiveconventions",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class UnobtrusiveConventions : IWantToRunBeforeConfiguration\r\n{\r\n    public void Init()\r\n    {\r\n        Configure.Instance\r\n            .DefiningCommandsAs(t => t.Namespace != null\r\n                                     && t.Namespace.StartsWith(\"MyCompany\")\r\n                                     && t.Namespace.EndsWith(\"Commands\"))\r\n            .DefiningEventsAs(t => t.Namespace != null\r\n                                   && t.Namespace.StartsWith(\"MyCompany\")\r\n                                   && t.Namespace.EndsWith(\"Events\"));\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 4,
                                "EndRow": 17,
                                "Value": "public class UnobtrusiveConventions : IWantToRunBeforeConfiguration\r\n{\r\n    public void Init()\r\n    {\r\n        Configure.Instance\r\n            .DefiningCommandsAs(t => t.Namespace != null\r\n                                     && t.Namespace.StartsWith(\"MyCompany\")\r\n                                     && t.Namespace.EndsWith(\"Commands\"))\r\n            .DefiningEventsAs(t => t.Namespace != null\r\n                                   && t.Namespace.StartsWith(\"MyCompany\")\r\n                                   && t.Namespace.EndsWith(\"Events\"));\r\n    }\r\n}",
                                "Key": "unobtrusiveconventions",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Conventions\\UnobtrusiveConventions.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "filesharedatabus",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configure = Configure.With()\r\n    .FileShareDataBus(databusPath);",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 14,
                                "Value": "var configure = Configure.With()\r\n    .FileShareDataBus(databusPath);",
                                "Key": "filesharedatabus",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "azuredatabus",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .AzureDataBus();",
                            "Source": {
                                "StartRow": 20,
                                "EndRow": 24,
                                "Value": "Configure.With()\r\n    .AzureDataBus();",
                                "Key": "azuredatabus",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messagewithlargepayload",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MessageWithLargePayload\r\n{\r\n    public string SomeProperty { get; set; }\r\n    public DataBusProperty<byte[]> LargeBlob { get; set; }\r\n}",
                            "Source": {
                                "StartRow": 31,
                                "EndRow": 38,
                                "Value": "public class MessageWithLargePayload\r\n{\r\n    public string SomeProperty { get; set; }\r\n    public DataBusProperty<byte[]> LargeBlob { get; set; }\r\n}",
                                "Key": "messagewithlargepayload",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messagewithlargepayloadusingconvention",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MessageWithLargePayloadUsingConvention\r\n{\r\n    public string SomeProperty { get; set; }\r\n    public byte[] LargeBlobDataBus { get; set; }\r\n}",
                            "Source": {
                                "StartRow": 41,
                                "EndRow": 48,
                                "Value": "public class MessageWithLargePayloadUsingConvention\r\n{\r\n    public string SomeProperty { get; set; }\r\n    public byte[] LargeBlobDataBus { get; set; }\r\n}",
                                "Key": "messagewithlargepayloadusingconvention",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "definemessagewithlargepayloadusingconvention",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "configuration.DefiningDataBusPropertiesAs(p => p.Name.EndsWith(\"DataBus\"));",
                            "Source": {
                                "StartRow": 55,
                                "EndRow": 58,
                                "Value": "configuration.DefiningDataBusPropertiesAs(p => p.Name.EndsWith(\"DataBus\"));",
                                "Key": "definemessagewithlargepayloadusingconvention",
                                "Language": "cs",
                                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-incoming-behavior",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleIncomingBehavior : IBehavior<ReceivePhysicalMessageContext>\r\n{\r\n    public void Invoke(ReceivePhysicalMessageContext context, Action next)\r\n    {\r\n        var headers = context.PhysicalMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n        next();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 20,
                                "Value": "public class SampleIncomingBehavior : IBehavior<ReceivePhysicalMessageContext>\r\n{\r\n    public void Invoke(ReceivePhysicalMessageContext context, Action next)\r\n    {\r\n        var headers = context.PhysicalMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n        next();\r\n    }\r\n}",
                                "Key": "header-incoming-behavior",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-outgoing-in-behavior",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleOutgoingBehavior : IBehavior<SendPhysicalMessageContext>\r\n{\r\n    public void Invoke(SendPhysicalMessageContext context, Action next)\r\n    {\r\n        var headers = context.MessageToSend.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n        next();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 22,
                                "EndRow": 31,
                                "Value": "public class SampleOutgoingBehavior : IBehavior<SendPhysicalMessageContext>\r\n{\r\n    public void Invoke(SendPhysicalMessageContext context, Action next)\r\n    {\r\n        var headers = context.MessageToSend.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n        next();\r\n    }\r\n}",
                                "Key": "header-outgoing-in-behavior",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-incoming-in-mutator",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleIncomingMutator : IMutateIncomingTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 33,
                                "EndRow": 42,
                                "Value": "public class SampleIncomingMutator : IMutateIncomingTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                                "Key": "header-incoming-in-mutator",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-outgoing-in-mutator",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleOutgoingMutator : IMutateOutgoingTransportMessages\r\n{\r\n    public void MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 44,
                                "EndRow": 52,
                                "Value": "public class SampleOutgoingMutator : IMutateOutgoingTransportMessages\r\n{\r\n    public void MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                                "Key": "header-outgoing-in-mutator",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-incoming-in-handler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleReadHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.CurrentMessageContext.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 54,
                                "EndRow": 65,
                                "Value": "public class SampleReadHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.CurrentMessageContext.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                                "Key": "header-incoming-in-handler",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-outgoing-in-handler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleWriteHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.OutgoingHeaders;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 67,
                                "EndRow": 77,
                                "Value": "public class SampleWriteHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.OutgoingHeaders;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                                "Key": "header-outgoing-in-handler",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customhostlogging",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class MyEndpointConfig : IConfigureThisEndpoint, IWantCustomLogging\r\n{\r\n    public void Init()\r\n    {\r\n        // setup your logging infrastructure then call\r\n        SetLoggingLibrary.Log4Net(null, new MyLogger());\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 5,
                                "EndRow": 13,
                                "Value": "class MyEndpointConfig : IConfigureThisEndpoint, IWantCustomLogging\r\n{\r\n    public void Init()\r\n    {\r\n        // setup your logging infrastructure then call\r\n        SetLoggingLibrary.Log4Net(null, new MyLogger());\r\n    }\r\n}",
                                "Key": "customhostlogging",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Host\\CustomLogging.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "hostidfixer",
            "Versions": [
                {
                    "Version": {
                        "Major": 5,
                        "Minor": 1,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\nconfig.UniquelyIdentifyRunningInstance()\r\n        .UsingNames(\"endpointName\", Environment.MachineName);\r\n// or\r\nvar hostId = CreateMyUniqueIdThatIsTheSameAcrossRestarts();\r\nconfig.UniquelyIdentifyRunningInstance()\r\n    .UsingCustomIdentifier(hostId);",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 18,
                                "Value": "var config = new BusConfiguration();\r\nconfig.UniquelyIdentifyRunningInstance()\r\n        .UsingNames(\"endpointName\", Environment.MachineName);\r\n// or\r\nvar hostId = CreateMyUniqueIdThatIsTheSameAcrossRestarts();\r\nconfig.UniquelyIdentifyRunningInstance()\r\n    .UsingCustomIdentifier(hostId);",
                                "Key": "hostidfixer",
                                "Language": "cs",
                                "File": "\\Snippets_5\\HostIdentifier\\HostIdFixer_5_1.cs",
                                "Version": {
                                    "Major": 5,
                                    "Minor": 1,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class HostIdFixer : IWantToRunWhenBusStartsAndStops\r\n{\r\n    UnicastBus bus;\r\n\r\n    public HostIdFixer(UnicastBus bus)\r\n    {\r\n        this.bus = bus;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        var hostId = CreateGuid(Environment.MachineName, Configure.EndpointName);\r\n        var identifier = Assembly.GetExecutingAssembly().Location;\r\n        bus.HostInformation = new HostInformation(hostId, Environment.MachineName, identifier);\r\n    }\r\n\r\n    static Guid CreateGuid(params string[] data)\r\n    {\r\n        using (var provider = new MD5CryptoServiceProvider())\r\n        {\r\n            var inputBytes = Encoding.Default.GetBytes(String.Concat(data));\r\n            var hashBytes = provider.ComputeHash(inputBytes);\r\n            return new Guid(hashBytes);\r\n        }\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 40,
                                "Value": "public class HostIdFixer : IWantToRunWhenBusStartsAndStops\r\n{\r\n    UnicastBus bus;\r\n\r\n    public HostIdFixer(UnicastBus bus)\r\n    {\r\n        this.bus = bus;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        var hostId = CreateGuid(Environment.MachineName, Configure.EndpointName);\r\n        var identifier = Assembly.GetExecutingAssembly().Location;\r\n        bus.HostInformation = new HostInformation(hostId, Environment.MachineName, identifier);\r\n    }\r\n\r\n    static Guid CreateGuid(params string[] data)\r\n    {\r\n        using (var provider = new MD5CryptoServiceProvider())\r\n        {\r\n            var inputBytes = Encoding.Default.GetBytes(String.Concat(data));\r\n            var hashBytes = provider.ComputeHash(inputBytes);\r\n            return new Guid(hashBytes);\r\n        }\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n    }\r\n}",
                                "Key": "hostidfixer",
                                "Language": "cs",
                                "File": "\\Snippets_4\\HostIdentifier\\HostIdFixer.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "nlogfiltering",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new LoggingConfiguration();\r\n\r\nvar target = new ColoredConsoleTarget();\r\nconfig.AddTarget(\"console\", target);\r\nconfig.LoggingRules.Add(new LoggingRule(\"MyNamespace.*\", LogLevel.Debug, target));\r\n\r\nLogManager.Configuration = config;\r\n\r\nSetLoggingLibrary.NLog();",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 22,
                                "Value": "var config = new LoggingConfiguration();\r\n\r\nvar target = new ColoredConsoleTarget();\r\nconfig.AddTarget(\"console\", target);\r\nconfig.LoggingRules.Add(new LoggingRule(\"MyNamespace.*\", LogLevel.Debug, target));\r\n\r\nLogManager.Configuration = config;\r\n\r\nSetLoggingLibrary.NLog();",
                                "Key": "nlogfiltering",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Logging\\NLog\\NLogFiltering.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messagefailedhandler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class MessageFailedHandler : IHandleMessages<MessageFailed>\r\n{\r\n    public void Handle(MessageFailed message)\r\n    {\r\n        var failedMessageId = message.FailedMessageId;\r\n        var exceptionMessage = message.FailureDetails.Exception.Message;\r\n\r\n        var chatMessage = string.Format(\"Message with id: {0} failed with reason: '{1}'. Open in ServiceInsight: {2}\",\r\n            failedMessageId,\r\n            exceptionMessage,\r\n            GetServiceInsightUri(failedMessageId));\r\n\r\n        using (var client = new HipchatClient())\r\n        {\r\n            client.PostChatMessage(chatMessage);\r\n        }\r\n    }",
                            "Source": {
                                "StartRow": 6,
                                "EndRow": 24,
                                "Value": "class MessageFailedHandler : IHandleMessages<MessageFailed>\r\n{\r\n    public void Handle(MessageFailed message)\r\n    {\r\n        var failedMessageId = message.FailedMessageId;\r\n        var exceptionMessage = message.FailureDetails.Exception.Message;\r\n\r\n        var chatMessage = string.Format(\"Message with id: {0} failed with reason: '{1}'. Open in ServiceInsight: {2}\",\r\n            failedMessageId,\r\n            exceptionMessage,\r\n            GetServiceInsightUri(failedMessageId));\r\n\r\n        using (var client = new HipchatClient())\r\n        {\r\n            client.PostChatMessage(chatMessage);\r\n        }\r\n    }",
                                "Key": "messagefailedhandler",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Monitoring\\MessageFailedHandler.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "servicecontroleventsconfig",
            "Versions": [
                {
                    "Version": {
                        "Major": 5,
                        "Minor": 0,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "configuration.UseSerialization<JsonSerializer>();\r\nconfiguration.Conventions()\r\n    .DefiningEventsAs(t => typeof(IEvent).IsAssignableFrom(t) ||\r\n                           //include ServiceControl events\r\n                           t.Namespace != null && t.Namespace.StartsWith(\"ServiceControl.Contracts\"));",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 17,
                                "Value": "configuration.UseSerialization<JsonSerializer>();\r\nconfiguration.Conventions()\r\n    .DefiningEventsAs(t => typeof(IEvent).IsAssignableFrom(t) ||\r\n                           //include ServiceControl events\r\n                           t.Namespace != null && t.Namespace.StartsWith(\"ServiceControl.Contracts\"));",
                                "Key": "servicecontroleventsconfig",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Monitoring\\ServiceControlEventsConfig.cs",
                                "Version": {
                                    "Major": 5,
                                    "Minor": 0,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.Serialization.Json();\r\nConfigure.Instance\r\n    .DefiningEventsAs(t => typeof(IEvent).IsAssignableFrom(t) ||\r\n                           //include ServiceControl events\r\n                           t.Namespace != null && t.Namespace.StartsWith(\"ServiceControl.Contracts\"));",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 15,
                                "Value": "Configure.Serialization.Json();\r\nConfigure.Instance\r\n    .DefiningEventsAs(t => typeof(IEvent).IsAssignableFrom(t) ||\r\n                           //include ServiceControl events\r\n                           t.Namespace != null && t.Namespace.StartsWith(\"ServiceControl.Contracts\"));",
                                "Key": "servicecontroleventsconfig",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Monitoring\\ServiceControlEventsConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "persistancewithazure",
            "Versions": [
                {
                    "Version": {
                        "Major": 6,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<AzureStoragePersistence>();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 12,
                                "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<AzureStoragePersistence>();",
                                "Key": "persistancewithazure",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\Azure\\AzurePersistence.cs",
                                "Version": {
                                    "Major": 6,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": {
                        "Major": 5,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .AzureSubscriptionStorage()\r\n    .AzureSagaPersister()\r\n    .UseAzureTimeoutPersister();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 14,
                                "Value": "Configure.With()\r\n    .AzureSubscriptionStorage()\r\n    .AzureSagaPersister()\r\n    .UseAzureTimeoutPersister();",
                                "Key": "persistancewithazure",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Persistence\\Azure\\AzurePersistence.cs",
                                "Version": {
                                    "Major": 5,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "configuringtransactionrecoverystorage",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var transactionRecoveryPath = \"path to transaction recovery storage\";\r\n    \r\nConfigure.With()\r\n    .CustomiseRavenPersistence(store =>\r\n    {\r\n        var documentStore = ((DocumentStore) store);\r\n        documentStore.TransactionRecoveryStorage = new LocalDirectoryTransactionRecoveryStorage(transactionRecoveryPath);\r\n    });",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 20,
                                "Value": "var transactionRecoveryPath = \"path to transaction recovery storage\";\r\n    \r\nConfigure.With()\r\n    .CustomiseRavenPersistence(store =>\r\n    {\r\n        var documentStore = ((DocumentStore) store);\r\n        documentStore.TransactionRecoveryStorage = new LocalDirectoryTransactionRecoveryStorage(transactionRecoveryPath);\r\n    });",
                                "Key": "configuringtransactionrecoverystorage",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Persistence\\RavenDB\\ConfiguringTransactionRecoveryStorage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "newstepinpipeline",
            "Versions": [
                {
                    "Version": {
                        "Major": 4,
                        "Minor": 5,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class NewStepInPipeline : PipelineOverride\r\n{\r\n    public override void Override(BehaviorList<HandlerInvocationContext> behaviorList)\r\n    {\r\n        behaviorList.InsertAfter<InvokeHandlersBehavior, SampleBehavior>();\r\n    }\r\n\r\n    //Classes inheriting from PipelineOverride are registered by convention. No need to explicitly register.\r\n}",
                            "Source": {
                                "StartRow": 6,
                                "EndRow": 15,
                                "Value": "class NewStepInPipeline : PipelineOverride\r\n{\r\n    public override void Override(BehaviorList<HandlerInvocationContext> behaviorList)\r\n    {\r\n        behaviorList.InsertAfter<InvokeHandlersBehavior, SampleBehavior>();\r\n    }\r\n\r\n    //Classes inheriting from PipelineOverride are registered by convention. No need to explicitly register.\r\n}",
                                "Key": "newstepinpipeline",
                                "Language": "cs",
                                "File": "\\Snippets_4\\PIpeline\\NewPipelineStep.cs",
                                "Version": {
                                    "Major": 4,
                                    "Minor": 5,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class NewStepInPipeline : RegisterStep\r\n{\r\n    public NewStepInPipeline()\r\n        : base(\"NewStepInPipeline\", typeof(SampleBehavior), \"Logs a warning when processing takes too long\")\r\n    {\r\n        // Optional: Specify where it needs to be invoked in the pipeline, for example InsertBefore or InsertAfter\r\n        InsertBefore(WellKnownStep.InvokeHandlers);\r\n    }\r\n}\r\n\r\nclass NewStepInPipelineRegistration : INeedInitialization\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        // Register the new step in the pipeline\r\n        configuration.Pipeline.Register<NewStepInPipeline>();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 5,
                                "EndRow": 24,
                                "Value": "class NewStepInPipeline : RegisterStep\r\n{\r\n    public NewStepInPipeline()\r\n        : base(\"NewStepInPipeline\", typeof(SampleBehavior), \"Logs a warning when processing takes too long\")\r\n    {\r\n        // Optional: Specify where it needs to be invoked in the pipeline, for example InsertBefore or InsertAfter\r\n        InsertBefore(WellKnownStep.InvokeHandlers);\r\n    }\r\n}\r\n\r\nclass NewStepInPipelineRegistration : INeedInitialization\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        // Register the new step in the pipeline\r\n        configuration.Pipeline.Register<NewStepInPipeline>();\r\n    }\r\n}",
                                "Key": "newstepinpipeline",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Pipeline\\NewPipelineStep.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "replacepipelinestep",
            "Versions": [
                {
                    "Version": {
                        "Major": 4,
                        "Minor": 5,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class ReplaceExistingBehavior : PipelineOverride\r\n{\r\n    public override void Override(BehaviorList<HandlerInvocationContext> behaviorList)\r\n    {\r\n        behaviorList.Replace<InvokeHandlersBehavior, MyInvokeHandlersBehavior>();\r\n    }\r\n\r\n    //Classes inheriting from PipelineOverride are registered by convention. No need to explicitly register.\r\n}",
                            "Source": {
                                "StartRow": 7,
                                "EndRow": 16,
                                "Value": "class ReplaceExistingBehavior : PipelineOverride\r\n{\r\n    public override void Override(BehaviorList<HandlerInvocationContext> behaviorList)\r\n    {\r\n        behaviorList.Replace<InvokeHandlersBehavior, MyInvokeHandlersBehavior>();\r\n    }\r\n\r\n    //Classes inheriting from PipelineOverride are registered by convention. No need to explicitly register.\r\n}",
                                "Key": "replacepipelinestep",
                                "Language": "cs",
                                "File": "\\Snippets_4\\PIpeline\\ReplacePipelineBehavior.cs",
                                "Version": {
                                    "Major": 4,
                                    "Minor": 5,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class ReplaceExistingBehavior : INeedInitialization\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        configuration.Pipeline.Replace(\"Id of the step to replace\", typeof(SampleBehavior), \"Description\");\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 4,
                                "EndRow": 11,
                                "Value": "public class ReplaceExistingBehavior : INeedInitialization\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        configuration.Pipeline.Replace(\"Id of the step to replace\", typeof(SampleBehavior), \"Description\");\r\n    }\r\n}",
                                "Key": "replacepipelinestep",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Pipeline\\ReplacePipelineBehavior.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "samplepipelinebehavior",
            "Versions": [
                {
                    "Version": {
                        "Major": 4,
                        "Minor": 5,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleBehavior : IBehavior<HandlerInvocationContext>\r\n{\r\n    public void Invoke(HandlerInvocationContext context, Action next)\r\n    {\r\n        next();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 6,
                                "EndRow": 15,
                                "Value": "public class SampleBehavior : IBehavior<HandlerInvocationContext>\r\n{\r\n    public void Invoke(HandlerInvocationContext context, Action next)\r\n    {\r\n        next();\r\n    }\r\n}",
                                "Key": "samplepipelinebehavior",
                                "Language": "cs",
                                "File": "\\Snippets_4\\PIpeline\\SampleBehavior.cs",
                                "Version": {
                                    "Major": 4,
                                    "Minor": 5,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleBehavior : IBehavior<IncomingContext>\r\n{\r\n    public void Invoke(IncomingContext context, Action next)\r\n    {\r\n        next();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 6,
                                "EndRow": 15,
                                "Value": "public class SampleBehavior : IBehavior<IncomingContext>\r\n{\r\n    public void Invoke(IncomingContext context, Action next)\r\n    {\r\n        next();\r\n    }\r\n}",
                                "Key": "samplepipelinebehavior",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Pipeline\\SampleBehavior.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-without-started-by",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 21,
                                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                                "Key": "saga-without-started-by",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-configure-self-hosted",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Feature.Enable<Sagas>();\r\nConfigure.Serialization.Xml();\r\nvar bus = NServiceBus.Configure.With()\r\n                        .DefaultBuilder()\r\n                        .UseTransport<Msmq>()\r\n                        .UnicastBus()\r\n                        .RavenSagaPersister()\r\n                        .CreateBus();",
                            "Source": {
                                "StartRow": 83,
                                "EndRow": 92,
                                "Value": "Feature.Enable<Sagas>();\r\nConfigure.Serialization.Xml();\r\nvar bus = NServiceBus.Configure.With()\r\n                        .DefaultBuilder()\r\n                        .UseTransport<Msmq>()\r\n                        .UnicastBus()\r\n                        .RavenSagaPersister()\r\n                        .CreateBus();",
                                "Key": "saga-configure-self-hosted",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-data",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySagaData : IContainSagaData\r\n{\r\n    // the following properties are mandatory\r\n    public Guid Id { get; set; }\r\n    public string Originator { get; set; }\r\n    public string OriginalMessageId { get; set; }\r\n\r\n    // property used as correlation id\r\n    [Unique]\r\n    public string SomeID { get; set; }\r\n\r\n    // all other properties you want persisted\r\n    public string SomeData { get; set; }\r\n}",
                            "Source": {
                                "StartRow": 112,
                                "EndRow": 126,
                                "Value": "public class MySagaData : IContainSagaData\r\n{\r\n    // the following properties are mandatory\r\n    public Guid Id { get; set; }\r\n    public string Originator { get; set; }\r\n    public string OriginalMessageId { get; set; }\r\n\r\n    // property used as correlation id\r\n    [Unique]\r\n    public string SomeID { get; set; }\r\n\r\n    // all other properties you want persisted\r\n    public string SomeData { get; set; }\r\n}",
                                "Key": "saga-data",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanningdefault",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With();",
                            "Source": {
                                "StartRow": 18,
                                "EndRow": 19,
                                "Value": "Configure.With();",
                                "Key": "scanningdefault",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanninglistofassemblies",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With(myListOfAssemblies);",
                            "Source": {
                                "StartRow": 22,
                                "EndRow": 23,
                                "Value": "Configure.With(myListOfAssemblies);",
                                "Key": "scanninglistofassemblies",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanningparamarrayofassemblies",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With(assembly1, assembly2);",
                            "Source": {
                                "StartRow": 26,
                                "EndRow": 27,
                                "Value": "Configure.With(assembly1, assembly2);",
                                "Key": "scanningparamarrayofassemblies",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanningcustomdirectory",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With(@\"c:\\my-custom-dir\");",
                            "Source": {
                                "StartRow": 30,
                                "EndRow": 31,
                                "Value": "Configure.With(@\"c:\\my-custom-dir\");",
                                "Key": "scanningcustomdirectory",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanninglistoftypes",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With(myTypes);",
                            "Source": {
                                "StartRow": 34,
                                "EndRow": 35,
                                "Value": "Configure.With(myTypes);",
                                "Key": "scanninglistoftypes",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanningexcludebyname",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With(AllAssemblies.Except(\"MyAssembly.dll\").And(\"MyAssembly.dll\"));",
                            "Source": {
                                "StartRow": 38,
                                "EndRow": 39,
                                "Value": "Configure.With(AllAssemblies.Except(\"MyAssembly.dll\").And(\"MyAssembly.dll\"));",
                                "Key": "scanningexcludebyname",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanningincludebypattern",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With(AllAssemblies.Matching(\"MyCompany.\").And(\"SomethingElse\"));",
                            "Source": {
                                "StartRow": 42,
                                "EndRow": 43,
                                "Value": "Configure.With(AllAssemblies.Matching(\"MyCompany.\").And(\"SomethingElse\"));",
                                "Key": "scanningincludebypattern",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scanningmixingincludeandexclude",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With(AllAssemblies.Matching(\"MyCompany.\").Except(\"BadAssembly.dll\"));",
                            "Source": {
                                "StartRow": 46,
                                "EndRow": 47,
                                "Value": "Configure.With(AllAssemblies.Matching(\"MyCompany.\").Except(\"BadAssembly.dll\"));",
                                "Key": "scanningmixingincludeandexclude",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "rabbitmq-config-basic",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>();",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 14,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>();",
                                "Key": "rabbitmq-config-basic",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": {
                        "Major": 1,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 12,
                                "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>();",
                                "Key": "rabbitmq-config-basic",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 1,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "rabbitmq-config-connectionstring-in-code",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .ConnectionString(\"My custom connection string\");",
                            "Source": {
                                "StartRow": 20,
                                "EndRow": 25,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .ConnectionString(\"My custom connection string\");",
                                "Key": "rabbitmq-config-connectionstring-in-code",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": {
                        "Major": 1,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>(() => \"My custom connection string\");",
                            "Source": {
                                "StartRow": 21,
                                "EndRow": 24,
                                "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>(() => \"My custom connection string\");",
                                "Key": "rabbitmq-config-connectionstring-in-code",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 1,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "rabbitmq-config-connectionstringname",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .ConnectionStringName(\"MyConnectionStringName\");",
                            "Source": {
                                "StartRow": 31,
                                "EndRow": 36,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .ConnectionStringName(\"MyConnectionStringName\");",
                                "Key": "rabbitmq-config-connectionstringname",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                },
                {
                    "Version": {
                        "Major": 1,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>(\"MyConnectionStringName\");",
                            "Source": {
                                "StartRow": 31,
                                "EndRow": 35,
                                "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>(\"MyConnectionStringName\");",
                                "Key": "rabbitmq-config-connectionstringname",
                                "Language": "cs",
                                "File": "\\Snippets_4\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 1,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "testingadditionaldependencies",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void RunWithDependencyInjection()\r\n    {\r\n        Test.Initialize();\r\n\r\n        var mockService = new MyService();\r\n        Test.Handler(bus => new WithDependencyInjectionHandler(mockService));\r\n        //Rest of test\r\n    }\r\n}\r\n\r\nclass WithDependencyInjectionHandler : IHandleMessages<MyMessage>\r\n{\r\n    MyService myService;\r\n\r\n    public WithDependencyInjectionHandler(MyService myService)\r\n    {\r\n        this.myService = myService;\r\n    }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 37,
                                "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void RunWithDependencyInjection()\r\n    {\r\n        Test.Initialize();\r\n\r\n        var mockService = new MyService();\r\n        Test.Handler(bus => new WithDependencyInjectionHandler(mockService));\r\n        //Rest of test\r\n    }\r\n}\r\n\r\nclass WithDependencyInjectionHandler : IHandleMessages<MyMessage>\r\n{\r\n    MyService myService;\r\n\r\n    public WithDependencyInjectionHandler(MyService myService)\r\n    {\r\n        this.myService = myService;\r\n    }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n    }\r\n}",
                                "Key": "testingadditionaldependencies",
                                "Language": "cs",
                                "File": "\\Snippets_4\\UnitTesting\\AdditionalServices.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "testingheadermanipulation",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n\r\n        Test.Handler<MyMessageHandler>()\r\n            .SetIncomingHeader(\"Test\", \"abc\")\r\n            .ExpectReply<ResponseMessage>(m => Test.Bus.GetMessageHeader(m, \"MyHeaderKey\") == \"myHeaderValue\")\r\n            .OnMessage<RequestMessage>(m => m.String = \"hello\");\r\n    }\r\n}\r\n\r\nclass MyMessageHandler : IHandleMessages<RequestMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(RequestMessage message)\r\n    {\r\n        var responseMessage = new ResponseMessage();\r\n        Bus.SetMessageHeader(responseMessage, \"MyHeaderKey\", \"myHeaderValue\");\r\n        Bus.Reply(responseMessage);\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 36,
                                "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n\r\n        Test.Handler<MyMessageHandler>()\r\n            .SetIncomingHeader(\"Test\", \"abc\")\r\n            .ExpectReply<ResponseMessage>(m => Test.Bus.GetMessageHeader(m, \"MyHeaderKey\") == \"myHeaderValue\")\r\n            .OnMessage<RequestMessage>(m => m.String = \"hello\");\r\n    }\r\n}\r\n\r\nclass MyMessageHandler : IHandleMessages<RequestMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(RequestMessage message)\r\n    {\r\n        var responseMessage = new ResponseMessage();\r\n        Bus.SetMessageHeader(responseMessage, \"MyHeaderKey\", \"myHeaderValue\");\r\n        Bus.Reply(responseMessage);\r\n    }\r\n}",
                                "Key": "testingheadermanipulation",
                                "Language": "cs",
                                "File": "\\Snippets_4\\UnitTesting\\HeaderManipulation.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "testingsaga",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n        Test.Saga<MySaga>()\r\n                .ExpectReplyToOriginator<MyResponse>() // In v4 the typo in Originator was fixed.\r\n                .ExpectTimeoutToBeSetIn<StartsSaga>((state, span) => span == TimeSpan.FromDays(7))\r\n                .ExpectPublish<MyEvent>()\r\n                .ExpectSend<MyCommand>()\r\n            .When(s => s.Handle(new StartsSaga()))\r\n                .ExpectPublish<MyEvent>()\r\n            .WhenSagaTimesOut()\r\n                .AssertSagaCompletionIs(true);\r\n    }\r\n}\r\n\r\npublic class MySaga : NServiceBus.Saga.Saga<MySagaData>,\r\n    IAmStartedByMessages<StartsSaga>,\r\n    IHandleTimeouts<StartsSaga>\r\n{\r\n    public void Handle(StartsSaga message)\r\n    {\r\n        ReplyToOriginator(new MyResponse());\r\n        Bus.Publish(new MyEvent());\r\n        Bus.Send(new MyCommand());\r\n        RequestTimeout(TimeSpan.FromDays(7), message); \r\n    }\r\n\r\n    public void Timeout(StartsSaga state)\r\n    {\r\n        Bus.Publish<MyEvent>();\r\n        MarkAsComplete();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 49,
                                "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n        Test.Saga<MySaga>()\r\n                .ExpectReplyToOriginator<MyResponse>() // In v4 the typo in Originator was fixed.\r\n                .ExpectTimeoutToBeSetIn<StartsSaga>((state, span) => span == TimeSpan.FromDays(7))\r\n                .ExpectPublish<MyEvent>()\r\n                .ExpectSend<MyCommand>()\r\n            .When(s => s.Handle(new StartsSaga()))\r\n                .ExpectPublish<MyEvent>()\r\n            .WhenSagaTimesOut()\r\n                .AssertSagaCompletionIs(true);\r\n    }\r\n}\r\n\r\npublic class MySaga : NServiceBus.Saga.Saga<MySagaData>,\r\n    IAmStartedByMessages<StartsSaga>,\r\n    IHandleTimeouts<StartsSaga>\r\n{\r\n    public void Handle(StartsSaga message)\r\n    {\r\n        ReplyToOriginator(new MyResponse());\r\n        Bus.Publish(new MyEvent());\r\n        Bus.Send(new MyCommand());\r\n        RequestTimeout(TimeSpan.FromDays(7), message); \r\n    }\r\n\r\n    public void Timeout(StartsSaga state)\r\n    {\r\n        Bus.Publish<MyEvent>();\r\n        MarkAsComplete();\r\n    }\r\n}",
                                "Key": "testingsaga",
                                "Language": "cs",
                                "File": "\\Snippets_4\\UnitTesting\\Saga.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "testingservicelayer",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class TestHandler\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n\r\n        Test.Handler<MyHandler>()\r\n            .ExpectReply<ResponseMessage>(m => m.String == \"hello\")\r\n            .OnMessage<RequestMessage>(m => m.String = \"hello\");\r\n    }\r\n}\r\n\r\npublic class MyHandler :\r\n    IHandleMessages<RequestMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(RequestMessage message)\r\n    {\r\n        var reply = new ResponseMessage\r\n        {\r\n            String = message.String\r\n        };\r\n        Bus.Reply(reply);\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 38,
                                "Value": "public class TestHandler\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n\r\n        Test.Handler<MyHandler>()\r\n            .ExpectReply<ResponseMessage>(m => m.String == \"hello\")\r\n            .OnMessage<RequestMessage>(m => m.String = \"hello\");\r\n    }\r\n}\r\n\r\npublic class MyHandler :\r\n    IHandleMessages<RequestMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(RequestMessage message)\r\n    {\r\n        var reply = new ResponseMessage\r\n        {\r\n            String = message.String\r\n        };\r\n        Bus.Reply(reply);\r\n    }\r\n}",
                                "Key": "testingservicelayer",
                                "Language": "cs",
                                "File": "\\Snippets_4\\UnitTesting\\ServiceLayer.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "exposewcfservice",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class CancelOrderService : WcfService<CancelOrder, ErrorCodes>\r\n{\r\n}\r\n\r\npublic class CancelOrderHandler : IHandleMessages<CancelOrder>\r\n{\r\n    public void Handle(CancelOrder message)\r\n    {\r\n        // Write code here\r\n    }\r\n}\r\n\r\npublic enum ErrorCodes\r\n{\r\n    Success,\r\n    Fail\r\n}\r\n\r\npublic class CancelOrder : ICommand\r\n{\r\n    public int OrderId { get; set; }\r\n}",
                            "Source": {
                                "StartRow": 6,
                                "EndRow": 30,
                                "Value": "public class CancelOrderService : WcfService<CancelOrder, ErrorCodes>\r\n{\r\n}\r\n\r\npublic class CancelOrderHandler : IHandleMessages<CancelOrder>\r\n{\r\n    public void Handle(CancelOrder message)\r\n    {\r\n        // Write code here\r\n    }\r\n}\r\n\r\npublic enum ErrorCodes\r\n{\r\n    Success,\r\n    Fail\r\n}\r\n\r\npublic class CancelOrder : ICommand\r\n{\r\n    public int OrderId { get; set; }\r\n}",
                                "Key": "exposewcfservice",
                                "Language": "cs",
                                "File": "\\Snippets_4\\WCF\\Expose_wcf.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "reflectioninterfacemessagecreation",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "//This type would be derived from some other runtime information\r\nvar messageType = typeof(MyInterfaceMessage);\r\n\r\nvar instance = messageCreator.CreateInstance(messageType);\r\n\r\n//use reflection to set properties on the constructed instance\r\n\r\nBus.Publish(instance);",
                            "Source": {
                                "StartRow": 21,
                                "EndRow": 29,
                                "Value": "//This type would be derived from some other runtime information\r\nvar messageType = typeof(MyInterfaceMessage);\r\n\r\nvar instance = messageCreator.CreateInstance(messageType);\r\n\r\n//use reflection to set properties on the constructed instance\r\n\r\nBus.Publish(instance);",
                                "Key": "reflectioninterfacemessagecreation",
                                "Language": "cs",
                                "File": "\\Snippets_5\\InterfaceMessageCreation.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "minimumconfiguration",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 11,
                                "Value": "var configuration = new BusConfiguration();",
                                "Key": "minimumconfiguration",
                                "Language": "cs",
                                "File": "\\Snippets_5\\MinimumConfiguration.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "busdotcreate",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "using (var bus = Bus.Create(configuration))\r\n{\r\n    bus.Start();\r\n}",
                            "Source": {
                                "StartRow": 14,
                                "EndRow": 20,
                                "Value": "using (var bus = Bus.Create(configuration))\r\n{\r\n    bus.Start();\r\n}",
                                "Key": "busdotcreate",
                                "Language": "cs",
                                "File": "\\Snippets_5\\MinimumConfiguration.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "registercustomserializer",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "configuration.UseSerialization(typeof(MyCustomSerializer));",
                            "Source": {
                                "StartRow": 14,
                                "EndRow": 15,
                                "Value": "configuration.UseSerialization(typeof(MyCustomSerializer));",
                                "Key": "registercustomserializer",
                                "Language": "cs",
                                "File": "\\Snippets_5\\RegisterCustomSerializer.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customserializer",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class MyCustomSerializer : IMessageSerializer\r\n{\r\n    public void Serialize(object message, Stream stream)\r\n    {\r\n        // Add code to serialize message\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public object[] Deserialize(Stream stream, IList<Type> messageTypes = null)\r\n    {\r\n        // Add code to deserialize message\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public string ContentType\r\n    {\r\n        get { throw new NotImplementedException(); }\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 19,
                                "EndRow": 38,
                                "Value": "class MyCustomSerializer : IMessageSerializer\r\n{\r\n    public void Serialize(object message, Stream stream)\r\n    {\r\n        // Add code to serialize message\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public object[] Deserialize(Stream stream, IList<Type> messageTypes = null)\r\n    {\r\n        // Add code to deserialize message\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public string ContentType\r\n    {\r\n        get { throw new NotImplementedException(); }\r\n    }\r\n}",
                                "Key": "customserializer",
                                "Language": "cs",
                                "File": "\\Snippets_5\\RegisterCustomSerializer.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "scaleout",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.ScaleOut().UseSingleBrokerQueue();\r\n//or\r\nconfiguration.ScaleOut().UseUniqueBrokerQueuePerMachine();",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 16,
                                "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.ScaleOut().UseSingleBrokerQueue();\r\n//or\r\nconfiguration.ScaleOut().UseUniqueBrokerQueuePerMachine();",
                                "Key": "scaleout",
                                "Language": "cs",
                                "File": "\\Snippets_5\\ScaleOut.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "timetowaitbeforetriggeringcriticalerrorontimeoutoutages",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages(TimeSpan.FromMinutes(5));",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 15,
                                "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages(TimeSpan.FromMinutes(5));",
                                "Key": "timetowaitbeforetriggeringcriticalerrorontimeoutoutages",
                                "Language": "cs",
                                "File": "\\Snippets_5\\TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "subscribetoerrorsnotifications",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SubscribeToErrorsNotifications : IWantToRunWhenBusStartsAndStops\r\n{\r\n    BusNotifications busNotifications;\r\n\r\n    public SubscribeToErrorsNotifications(BusNotifications busNotifications)\r\n    {\r\n        this.busNotifications = busNotifications;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        unsubscribeStreams.Add(\r\n            busNotifications.Errors.MessageSentToErrorQueue\r\n                // It is very important to handle streams on another thread\r\n                // otherwise the system performance can be impacted\r\n                .SubscribeOn(System.Reactive.Concurrency.Scheduler.Default) // Uses a pool-based scheduler\r\n                .Subscribe(SendEmailOnFailure)\r\n            );\r\n\r\n\r\n        // You can also subscribe when messages fail FLR and/or SLR\r\n        // - busNotifications.Errors.MessageHasFailedAFirstLevelRetryAttempt\r\n        // - busNotifications.Errors.MessageHasBeenSentToSecondLevelRetries\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n        foreach (var unsubscribeStream in unsubscribeStreams)\r\n        {\r\n            unsubscribeStream.Dispose();\r\n        }\r\n    }\r\n\r\n    void SendEmailOnFailure(FailedMessage failedMessage)\r\n    {\r\n        using (var c = new SmtpClient())\r\n        {\r\n\r\n            using (var mailMessage = new MailMessage(\"from@mail.com\",\r\n                \"to@mail.com\", \"Message sent to error queue\",\r\n                failedMessage.Exception.ToString()))\r\n            {\r\n                try\r\n                {\r\n                    c.Send(mailMessage);\r\n                }\r\n                catch (SmtpFailedRecipientsException)\r\n                {\r\n                    // Failed to send an email to some of its recipients\r\n                    // Probably you should log this as a warning!\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    List<IDisposable> unsubscribeStreams = new List<IDisposable>();\r\n}",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 66,
                                "Value": "public class SubscribeToErrorsNotifications : IWantToRunWhenBusStartsAndStops\r\n{\r\n    BusNotifications busNotifications;\r\n\r\n    public SubscribeToErrorsNotifications(BusNotifications busNotifications)\r\n    {\r\n        this.busNotifications = busNotifications;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        unsubscribeStreams.Add(\r\n            busNotifications.Errors.MessageSentToErrorQueue\r\n                // It is very important to handle streams on another thread\r\n                // otherwise the system performance can be impacted\r\n                .SubscribeOn(System.Reactive.Concurrency.Scheduler.Default) // Uses a pool-based scheduler\r\n                .Subscribe(SendEmailOnFailure)\r\n            );\r\n\r\n\r\n        // You can also subscribe when messages fail FLR and/or SLR\r\n        // - busNotifications.Errors.MessageHasFailedAFirstLevelRetryAttempt\r\n        // - busNotifications.Errors.MessageHasBeenSentToSecondLevelRetries\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n        foreach (var unsubscribeStream in unsubscribeStreams)\r\n        {\r\n            unsubscribeStream.Dispose();\r\n        }\r\n    }\r\n\r\n    void SendEmailOnFailure(FailedMessage failedMessage)\r\n    {\r\n        using (var c = new SmtpClient())\r\n        {\r\n\r\n            using (var mailMessage = new MailMessage(\"from@mail.com\",\r\n                \"to@mail.com\", \"Message sent to error queue\",\r\n                failedMessage.Exception.ToString()))\r\n            {\r\n                try\r\n                {\r\n                    c.Send(mailMessage);\r\n                }\r\n                catch (SmtpFailedRecipientsException)\r\n                {\r\n                    // Failed to send an email to some of its recipients\r\n                    // Probably you should log this as a warning!\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    List<IDisposable> unsubscribeStreams = new List<IDisposable>();\r\n}",
                                "Key": "subscribetoerrorsnotifications",
                                "Language": "cs",
                                "File": "\\Snippets_5\\BusNotifications\\Errors.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "azuredatabusconfiguration",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "configuration.UseDataBus<AzureDataBus>()\r\n    .ConnectionString(azureStorageConnectionString)\r\n    .Container(containerName)\r\n    .BasePath(basePathWithinContainer)\r\n    .BlockSize(blockSize)\r\n    .DefaultTTL(timeToLiveInSeconds)\r\n    .MaxRetries(maxNumberOfRetryAttempts)\r\n    .NumberOfIOThreads(numberOfIoThreads)\r\n    .BackOffInterval(backOffIntervalBetweenRetriesInSecs);",
                            "Source": {
                                "StartRow": 47,
                                "EndRow": 58,
                                "Value": "configuration.UseDataBus<AzureDataBus>()\r\n    .ConnectionString(azureStorageConnectionString)\r\n    .Container(containerName)\r\n    .BasePath(basePathWithinContainer)\r\n    .BlockSize(blockSize)\r\n    .DefaultTTL(timeToLiveInSeconds)\r\n    .MaxRetries(maxNumberOfRetryAttempts)\r\n    .NumberOfIOThreads(numberOfIoThreads)\r\n    .BackOffInterval(backOffIntervalBetweenRetriesInSecs);",
                                "Key": "azuredatabusconfiguration",
                                "Language": "cs",
                                "File": "\\Snippets_5\\DataBus\\DataBus.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customdatabus",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class CustomDataBus : IDataBus\r\n{\r\n    public Stream Get( string key )\r\n    {\r\n        return File.OpenRead( \"blob.dat\" );\r\n    }\r\n\r\n    public string Put( Stream stream, TimeSpan timeToBeReceived )\r\n    {\r\n        using( var destination = File.OpenWrite( \"blob.dat\" ) )\r\n        {\r\n            stream.CopyTo( destination );\r\n        }\r\n        return \"the-key-of-the-stored-file-such-as-the-full-path\";\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 104,
                                "EndRow": 126,
                                "Value": "class CustomDataBus : IDataBus\r\n{\r\n    public Stream Get( string key )\r\n    {\r\n        return File.OpenRead( \"blob.dat\" );\r\n    }\r\n\r\n    public string Put( Stream stream, TimeSpan timeToBeReceived )\r\n    {\r\n        using( var destination = File.OpenWrite( \"blob.dat\" ) )\r\n        {\r\n            stream.CopyTo( destination );\r\n        }\r\n        return \"the-key-of-the-stored-file-such-as-the-full-path\";\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n    }\r\n}",
                                "Key": "customdatabus",
                                "Language": "cs",
                                "File": "\\Snippets_5\\DataBus\\DataBus.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "plugincustomdatabusv5",
            "Versions": [
                {
                    "Version": {
                        "Major": 5,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseDataBus(typeof(CustomDataBus));",
                            "Source": {
                                "StartRow": 133,
                                "EndRow": 137,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseDataBus(typeof(CustomDataBus));",
                                "Key": "plugincustomdatabusv5",
                                "Language": "cs",
                                "File": "\\Snippets_5\\DataBus\\DataBus.cs",
                                "Version": {
                                    "Major": 5,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "usingmessagebodyencryptor",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.RegisterComponents(c => c.ConfigureComponent<MessageEncryptor>(DependencyLifecycle.InstancePerCall));",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 15,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.RegisterComponents(c => c.ConfigureComponent<MessageEncryptor>(DependencyLifecycle.InstancePerCall));",
                                "Key": "usingmessagebodyencryptor",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Encryption\\MessageBodyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "messagebodyencryptor",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MessageEncryptor : IMutateTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        transportMessage.Body = transportMessage.Body.Reverse().ToArray();\r\n    }\r\n\r\n    public void MutateOutgoing(LogicalMessage logicalMessage, TransportMessage transportMessage)\r\n    {\r\n        transportMessage.Body = transportMessage.Body.Reverse().ToArray();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 20,
                                "EndRow": 33,
                                "Value": "public class MessageEncryptor : IMutateTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        transportMessage.Body = transportMessage.Body.Reverse().ToArray();\r\n    }\r\n\r\n    public void MutateOutgoing(LogicalMessage logicalMessage, TransportMessage transportMessage)\r\n    {\r\n        transportMessage.Body = transportMessage.Body.Reverse().ToArray();\r\n    }\r\n}",
                                "Key": "messagebodyencryptor",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Encryption\\MessageBodyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "encryptionfromfluentapi",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nvar encryptionKey = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\";\r\nvar expiredKeys = new List<string>\r\n                  {\r\n                      \"abDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\",\r\n                      \"cdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                  };\r\nconfiguration.RijndaelEncryptionService(encryptionKey, expiredKeys);",
                            "Source": {
                                "StartRow": 43,
                                "EndRow": 53,
                                "Value": "var configuration = new BusConfiguration();\r\nvar encryptionKey = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\";\r\nvar expiredKeys = new List<string>\r\n                  {\r\n                      \"abDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\",\r\n                      \"cdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                  };\r\nconfiguration.RijndaelEncryptionService(encryptionKey, expiredKeys);",
                                "Key": "encryptionfromfluentapi",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Encryption\\PropertyEncryption.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-incoming-behaviour",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleIncomingBehavior :\r\n    IBehavior<IncomingContext>\r\n{\r\n    public void Invoke(IncomingContext context, Action next)\r\n    {\r\n        var headers = context.PhysicalMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n        next();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 22,
                                "Value": "public class SampleIncomingBehavior :\r\n    IBehavior<IncomingContext>\r\n{\r\n    public void Invoke(IncomingContext context, Action next)\r\n    {\r\n        var headers = context.PhysicalMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n        next();\r\n    }\r\n}",
                                "Key": "header-incoming-behaviour",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "header-outgoing-behavior",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SampleOutgoingBehavior : IBehavior<OutgoingContext>\r\n{\r\n    public void Invoke(OutgoingContext context, Action next)\r\n    {\r\n        var headers = context.OutgoingMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n        next();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 24,
                                "EndRow": 33,
                                "Value": "public class SampleOutgoingBehavior : IBehavior<OutgoingContext>\r\n{\r\n    public void Invoke(OutgoingContext context, Action next)\r\n    {\r\n        var headers = context.OutgoingMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n        next();\r\n    }\r\n}",
                                "Key": "header-outgoing-behavior",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Headers\\HeaderUsage.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "asaclientequivalent",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\n\r\nconfig.PurgeOnStartup(true);\r\nconfig.Transactions().Disable();\r\nconfig.DisableFeature<SecondLevelRetries>();\r\nconfig.DisableFeature<StorageDrivenPublishing>();\r\nconfig.DisableFeature<TimeoutManager>();",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 18,
                                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.PurgeOnStartup(true);\r\nconfig.Transactions().Disable();\r\nconfig.DisableFeature<SecondLevelRetries>();\r\nconfig.DisableFeature<StorageDrivenPublishing>();\r\nconfig.DisableFeature<TimeoutManager>();",
                                "Key": "asaclientequivalent",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Host\\AsAClientEquivalent.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "customize_nsb_host",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "using NServiceBus;\r\nclass CustomizingHost : IConfigureThisEndpoint\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        // To customize, use the configuration parameter. \r\n        // For example, to customize the endpoint name:\r\n        configuration.EndpointName(\"NewEndpointName\");\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 3,
                                "EndRow": 13,
                                "Value": "using NServiceBus;\r\nclass CustomizingHost : IConfigureThisEndpoint\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        // To customize, use the configuration parameter. \r\n        // For example, to customize the endpoint name:\r\n        configuration.EndpointName(\"NewEndpointName\");\r\n    }\r\n}",
                                "Key": "customize_nsb_host",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Host\\CustomizingHost.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "overrideloggingdefaultsincode",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var defaultFactory = LogManager.Use<DefaultFactory>();\r\ndefaultFactory.Directory(\"pathToLoggingDirectory\");\r\ndefaultFactory.Level(LogLevel.Debug);",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 15,
                                "Value": "var defaultFactory = LogManager.Use<DefaultFactory>();\r\ndefaultFactory.Directory(\"pathToLoggingDirectory\");\r\ndefaultFactory.Level(LogLevel.Debug);",
                                "Key": "overrideloggingdefaultsincode",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Logging\\BuiltInConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "commonloggingincode",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "LogManager.Adapter = new ConsoleOutLoggerFactoryAdapter();\r\n\r\nNServiceBus.Logging.LogManager.Use<CommonLoggingFactory>();",
                            "Source": {
                                "StartRow": 10,
                                "EndRow": 15,
                                "Value": "LogManager.Adapter = new ConsoleOutLoggerFactoryAdapter();\r\n\r\nNServiceBus.Logging.LogManager.Use<CommonLoggingFactory>();",
                                "Key": "commonloggingincode",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Logging\\CommonLogging\\CommonLoggingConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "log4netincode",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var layout = new PatternLayout\r\n{\r\n    ConversionPattern = \"%d [%t] %-5p %c [%x] - %m%n\"\r\n};\r\nlayout.ActivateOptions();\r\nvar consoleAppender = new ColoredConsoleAppender\r\n{\r\n    Threshold = Level.Debug,\r\n    Layout = layout\r\n};\r\nconsoleAppender.ActivateOptions();\r\nvar fileAppender = new RollingFileAppender\r\n{\r\n    DatePattern = \"yyyy-MM-dd'.txt'\",\r\n    RollingStyle = RollingFileAppender.RollingMode.Composite,\r\n    MaxFileSize = 10 * 1024 * 1024,\r\n    MaxSizeRollBackups = 10,\r\n    LockingModel = new FileAppender.MinimalLock(),\r\n    StaticLogFileName = false,\r\n    File = @\"nsb_log_\",\r\n    Layout = layout,\r\n    AppendToFile = true,\r\n    Threshold = Level.Debug,\r\n};\r\nfileAppender.ActivateOptions();\r\n\r\nBasicConfigurator.Configure(fileAppender, consoleAppender);\r\n\r\nLogManager.Use<Log4NetFactory>();",
                            "Source": {
                                "StartRow": 13,
                                "EndRow": 44,
                                "Value": "var layout = new PatternLayout\r\n{\r\n    ConversionPattern = \"%d [%t] %-5p %c [%x] - %m%n\"\r\n};\r\nlayout.ActivateOptions();\r\nvar consoleAppender = new ColoredConsoleAppender\r\n{\r\n    Threshold = Level.Debug,\r\n    Layout = layout\r\n};\r\nconsoleAppender.ActivateOptions();\r\nvar fileAppender = new RollingFileAppender\r\n{\r\n    DatePattern = \"yyyy-MM-dd'.txt'\",\r\n    RollingStyle = RollingFileAppender.RollingMode.Composite,\r\n    MaxFileSize = 10 * 1024 * 1024,\r\n    MaxSizeRollBackups = 10,\r\n    LockingModel = new FileAppender.MinimalLock(),\r\n    StaticLogFileName = false,\r\n    File = @\"nsb_log_\",\r\n    Layout = layout,\r\n    AppendToFile = true,\r\n    Threshold = Level.Debug,\r\n};\r\nfileAppender.ActivateOptions();\r\n\r\nBasicConfigurator.Configure(fileAppender, consoleAppender);\r\n\r\nLogManager.Use<Log4NetFactory>();",
                                "Key": "log4netincode",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Logging\\Log4Net\\Log4NetConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "nlogincode",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new LoggingConfiguration();\r\n\r\nvar consoleTarget = new ColoredConsoleTarget\r\n{\r\n    Layout = \"${level}|${logger}|${message}${onexception:${newline}${exception:format=tostring}}\"\r\n};\r\nconfig.AddTarget(\"console\", consoleTarget);\r\nconfig.LoggingRules.Add(new LoggingRule(\"*\", LogLevel.Debug, consoleTarget));\r\n\r\nLogManager.Configuration = config;\r\n\r\nNServiceBus.Logging.LogManager.Use<NLogFactory>();",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 25,
                                "Value": "var config = new LoggingConfiguration();\r\n\r\nvar consoleTarget = new ColoredConsoleTarget\r\n{\r\n    Layout = \"${level}|${logger}|${message}${onexception:${newline}${exception:format=tostring}}\"\r\n};\r\nconfig.AddTarget(\"console\", consoleTarget);\r\nconfig.LoggingRules.Add(new LoggingRule(\"*\", LogLevel.Debug, consoleTarget));\r\n\r\nLogManager.Configuration = config;\r\n\r\nNServiceBus.Logging.LogManager.Use<NLogFactory>();",
                                "Key": "nlogincode",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Logging\\NLog\\NLogConfig.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "outboxenablineinfluent",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.EnableOutbox();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 13,
                                "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.EnableOutbox();",
                                "Key": "outboxenablineinfluent",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Outbox\\OutboxEnableInFluent.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "outboxnhibernateaccesssession",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "class OrderPlacedHandler : IHandleMessages<OrderPlaced>\r\n{\r\n    NHibernateStorageContext nHibernateStorageContext;\r\n\r\n    public OrderPlacedHandler(NHibernateStorageContext nHibernateStorageContext)\r\n    {\r\n        this.nHibernateStorageContext = nHibernateStorageContext;\r\n    }\r\n\r\n    public void Handle(OrderPlaced message)\r\n    {\r\n        var order = nHibernateStorageContext.Session.Get<OrderEntity>(message.OrderId);\r\n        order.Shipped = true;\r\n        nHibernateStorageContext.Session.Update(order);\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 5,
                                "EndRow": 22,
                                "Value": "class OrderPlacedHandler : IHandleMessages<OrderPlaced>\r\n{\r\n    NHibernateStorageContext nHibernateStorageContext;\r\n\r\n    public OrderPlacedHandler(NHibernateStorageContext nHibernateStorageContext)\r\n    {\r\n        this.nHibernateStorageContext = nHibernateStorageContext;\r\n    }\r\n\r\n    public void Handle(OrderPlaced message)\r\n    {\r\n        var order = nHibernateStorageContext.Session.Get<OrderEntity>(message.OrderId);\r\n        order.Shipped = true;\r\n        nHibernateStorageContext.Session.Update(order);\r\n    }\r\n}",
                                "Key": "outboxnhibernateaccesssession",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Outbox\\NHibernate\\AccessSession.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "outboxsharenhibernateconfiguration",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var hibernateConfiguration = BuildMyBusinessDataNHibernateConfiguration();\r\n\r\nconfiguration.UsePersistence<NHibernatePersistence>()\r\n    .UseConfiguration(hibernateConfiguration);",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 17,
                                "Value": "var hibernateConfiguration = BuildMyBusinessDataNHibernateConfiguration();\r\n\r\nconfiguration.UsePersistence<NHibernatePersistence>()\r\n    .UseConfiguration(hibernateConfiguration);",
                                "Key": "outboxsharenhibernateconfiguration",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Outbox\\NHibernate\\ShareConfiguration.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "persistenceorder_correct",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<RavenDBPersistence>();\r\n    \r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);",
                            "Source": {
                                "StartRow": 9,
                                "EndRow": 18,
                                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<RavenDBPersistence>();\r\n    \r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);",
                                "Key": "persistenceorder_correct",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\PersistenceOrder.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "persistenceorder_explicit",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);\r\n\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .For(Storage.Sagas, Storage.Subscriptions, Storage.Timeouts);",
                            "Source": {
                                "StartRow": 24,
                                "EndRow": 34,
                                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);\r\n\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .For(Storage.Sagas, Storage.Subscriptions, Storage.Timeouts);",
                                "Key": "persistenceorder_explicit",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\PersistenceOrder.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "persistenceorder_incorrect",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);\r\n\r\n// This one will override the above settings!\r\nconfig.UsePersistence<RavenDBPersistence>();",
                            "Source": {
                                "StartRow": 40,
                                "EndRow": 50,
                                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);\r\n\r\n// This one will override the above settings!\r\nconfig.UsePersistence<RavenDBPersistence>();",
                                "Key": "persistenceorder_incorrect",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\PersistenceOrder.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "persistencewithazurehost",
            "Versions": [
                {
                    "Version": {
                        "Major": 6,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class EndpointConfig : IConfigureThisEndpoint\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        configuration.UsePersistence<AzureStoragePersistence>();\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 16,
                                "EndRow": 25,
                                "Value": "public class EndpointConfig : IConfigureThisEndpoint\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        configuration.UsePersistence<AzureStoragePersistence>();\r\n    }\r\n}",
                                "Key": "persistencewithazurehost",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\Azure\\AzurePersistence.cs",
                                "Version": {
                                    "Major": 6,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "ravendb-persistence-stale-sagas",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .AllowStaleSagaReads();",
                            "Source": {
                                "StartRow": 14,
                                "EndRow": 19,
                                "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .AllowStaleSagaReads();",
                                "Key": "ravendb-persistence-stale-sagas",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "ravendb-persistence-shared-session-for-sagas",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>().UseSharedSession(() =>\r\n{\r\n    var session = myDocumentStore.OpenSession();\r\n    // customize the session properties here\r\n    return session;\r\n});",
                            "Source": {
                                "StartRow": 25,
                                "EndRow": 37,
                                "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>().UseSharedSession(() =>\r\n{\r\n    var session = myDocumentStore.OpenSession();\r\n    // customize the session properties here\r\n    return session;\r\n});",
                                "Key": "ravendb-persistence-shared-session-for-sagas",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "ravendb-persistence-shared-session-for-sagas-handler",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MyMessageHandler : IHandleMessages<MyMessage>\r\n{\r\n    public ISessionProvider SessionProvider { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var doc = new MyDocument();\r\n\r\n        SessionProvider.Session.Store(doc);\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 49,
                                "EndRow": 62,
                                "Value": "public class MyMessageHandler : IHandleMessages<MyMessage>\r\n{\r\n    public ISessionProvider SessionProvider { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var doc = new MyDocument();\r\n\r\n        SessionProvider.Session.Store(doc);\r\n    }\r\n}",
                                "Key": "ravendb-persistence-shared-session-for-sagas-handler",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "ravendb-persistence-specific-external-store",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .UseDocumentStoreForSubscriptions(myDocumentStore)\r\n    .UseDocumentStoreForSagas(myDocumentStore)\r\n    .UseDocumentStoreForTimeouts(myDocumentStore);",
                            "Source": {
                                "StartRow": 67,
                                "EndRow": 77,
                                "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .UseDocumentStoreForSubscriptions(myDocumentStore)\r\n    .UseDocumentStoreForSagas(myDocumentStore)\r\n    .UseDocumentStoreForTimeouts(myDocumentStore);",
                                "Key": "ravendb-persistence-specific-external-store",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "ravendb-persistence-external-store",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(myDocumentStore);",
                            "Source": {
                                "StartRow": 88,
                                "EndRow": 97,
                                "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(myDocumentStore);",
                                "Key": "ravendb-persistence-external-store",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "ravendb-persistence-external-connection-params",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var connectionParams = new ConnectionParameters();\r\n// configure connection params (ApiKey, DatabaseName, Url) here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(connectionParams);",
                            "Source": {
                                "StartRow": 103,
                                "EndRow": 111,
                                "Value": "var connectionParams = new ConnectionParameters();\r\n// configure connection params (ApiKey, DatabaseName, Url) here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(connectionParams);",
                                "Key": "ravendb-persistence-external-connection-params",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "ravendb-persistence-default",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>();",
                            "Source": {
                                "StartRow": 124,
                                "EndRow": 128,
                                "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>();",
                                "Key": "ravendb-persistence-default",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "changeresourcemanagerid",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "const string id = \"d5723e19-92ad-4531-adad-8611e6e05c8a\";\r\nvar store = new DocumentStore\r\n            {\r\n                ResourceManagerId = new Guid(id)\r\n            };\r\nstore.Initialize();\r\n\r\nvar configuration = new BusConfiguration();\r\nconfiguration.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(store);",
                            "Source": {
                                "StartRow": 11,
                                "EndRow": 23,
                                "Value": "const string id = \"d5723e19-92ad-4531-adad-8611e6e05c8a\";\r\nvar store = new DocumentStore\r\n            {\r\n                ResourceManagerId = new Guid(id)\r\n            };\r\nstore.Initialize();\r\n\r\nvar configuration = new BusConfiguration();\r\nconfiguration.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(store);",
                                "Key": "changeresourcemanagerid",
                                "Language": "cs",
                                "File": "\\Snippets_5\\RavenDB\\ChangeResourceManagerID.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-without-mapping",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        // code to handle Message1\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 35,
                                "EndRow": 55,
                                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        // code to handle Message1\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                                "Key": "saga-without-mapping",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-find-by-expression",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n{\r\n    mapper.ConfigureMapping<Message3>(m => m.Part1 + \"_\" + m.Part2)\r\n            .ToSaga(m => m.SomeID);\r\n}",
                            "Source": {
                                "StartRow": 93,
                                "EndRow": 100,
                                "Value": "protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n{\r\n    mapper.ConfigureMapping<Message3>(m => m.Part1 + \"_\" + m.Part2)\r\n            .ToSaga(m => m.SomeID);\r\n}",
                                "Key": "saga-find-by-expression",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-with-reply",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<Message2>(s => s.SomeID)\r\n                .ToSaga(m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        ReplyToOriginator(new AlmostDoneMessage { SomeID = Data.SomeID });\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 145,
                                "EndRow": 167,
                                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<Message2>(s => s.SomeID)\r\n                .ToSaga(m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        ReplyToOriginator(new AlmostDoneMessage { SomeID = Data.SomeID });\r\n    }\r\n}",
                                "Key": "saga-with-reply",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-with-timeout",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>,\r\n                        IHandleTimeouts<MyCustomTimeout>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<Message2>(s => s.SomeID)\r\n                .ToSaga(m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n        RequestTimeout<MyCustomTimeout>(TimeSpan.FromHours(1));\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        Data.Message2Arrived = true;\r\n        ReplyToOriginator(new AlmostDoneMessage\r\n            {\r\n                SomeID = Data.SomeID\r\n            });\r\n    }\r\n\r\n    public void Timeout(MyCustomTimeout state)\r\n    {\r\n        if (!Data.Message2Arrived)\r\n        {\r\n            ReplyToOriginator(new TiredOfWaitingForMessage2());\r\n        }\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 173,
                                "EndRow": 209,
                                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>,\r\n                        IHandleTimeouts<MyCustomTimeout>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<Message2>(s => s.SomeID)\r\n                .ToSaga(m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n        RequestTimeout<MyCustomTimeout>(TimeSpan.FromHours(1));\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        Data.Message2Arrived = true;\r\n        ReplyToOriginator(new AlmostDoneMessage\r\n            {\r\n                SomeID = Data.SomeID\r\n            });\r\n    }\r\n\r\n    public void Timeout(MyCustomTimeout state)\r\n    {\r\n        if (!Data.Message2Arrived)\r\n        {\r\n            ReplyToOriginator(new TiredOfWaitingForMessage2());\r\n        }\r\n    }\r\n}",
                                "Key": "saga-with-timeout",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-with-complete",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public void Handle(Message2 message)\r\n{\r\n    Data.Message2Arrived = true;\r\n    ReplyToOriginator(new AlmostDoneMessage\r\n    {\r\n        SomeID = Data.SomeID\r\n    });\r\n    MarkAsComplete();\r\n}",
                            "Source": {
                                "StartRow": 233,
                                "EndRow": 244,
                                "Value": "public void Handle(Message2 message)\r\n{\r\n    Data.Message2Arrived = true;\r\n    ReplyToOriginator(new AlmostDoneMessage\r\n    {\r\n        SomeID = Data.SomeID\r\n    });\r\n    MarkAsComplete();\r\n}",
                                "Key": "saga-with-complete",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-not-found",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "public class SagaNotFoundHandler : IHandleSagaNotFound\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(object message)\r\n    {\r\n        Bus.Reply(new SagaDisappearedMessage());\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 258,
                                "EndRow": 269,
                                "Value": "public class SagaNotFoundHandler : IHandleSagaNotFound\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(object message)\r\n    {\r\n        Bus.Reply(new SagaDisappearedMessage());\r\n    }\r\n}",
                                "Key": "saga-not-found",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "saga-finder",
            "Versions": [
                {
                    "Version": null,
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "// NHibernate example:\r\npublic class MyNHibernateSagaFinder : IFindSagas<MySagaData>.Using<Message2>\r\n{\r\n    public NHibernateStorageContext StorageContext { get; set; }\r\n\r\n    public MySagaData FindBy(Message2 message)\r\n    {\r\n        //your custom finding logic here, e.g.\r\n        return StorageContext.Session.QueryOver<MySagaData>()\r\n                                .Where(x => x.SomeID == message.SomeID && x.SomeData == message.SomeData)\r\n                                .SingleOrDefault();\r\n    }\r\n}\r\n\r\n// RavenDb example:\r\npublic class MyRavenDbSagaFinder : IFindSagas<MySagaData>.Using<Message2>\r\n{\r\n    public ISessionProvider SessionProvider { get; set; }\r\n\r\n    public MySagaData FindBy(Message2 message)\r\n    {\r\n        //your custom finding logic here, e.g.\r\n        return SessionProvider.Session\r\n                                .Query<MySagaData>()\r\n                                .SingleOrDefault(x => x.SomeID == message.SomeID && x.SomeData == message.SomeData);\r\n    }\r\n}",
                            "Source": {
                                "StartRow": 274,
                                "EndRow": 302,
                                "Value": "// NHibernate example:\r\npublic class MyNHibernateSagaFinder : IFindSagas<MySagaData>.Using<Message2>\r\n{\r\n    public NHibernateStorageContext StorageContext { get; set; }\r\n\r\n    public MySagaData FindBy(Message2 message)\r\n    {\r\n        //your custom finding logic here, e.g.\r\n        return StorageContext.Session.QueryOver<MySagaData>()\r\n                                .Where(x => x.SomeID == message.SomeID && x.SomeData == message.SomeData)\r\n                                .SingleOrDefault();\r\n    }\r\n}\r\n\r\n// RavenDb example:\r\npublic class MyRavenDbSagaFinder : IFindSagas<MySagaData>.Using<Message2>\r\n{\r\n    public ISessionProvider SessionProvider { get; set; }\r\n\r\n    public MySagaData FindBy(Message2 message)\r\n    {\r\n        //your custom finding logic here, e.g.\r\n        return SessionProvider.Session\r\n                                .Query<MySagaData>()\r\n                                .SingleOrDefault(x => x.SomeID == message.SomeID && x.SomeData == message.SomeData);\r\n    }\r\n}",
                                "Key": "saga-finder",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                                "Version": null
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "rabbitmq-config-disablecallbackreceiver",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .DisableCallbackReceiver();",
                            "Source": {
                                "StartRow": 43,
                                "EndRow": 48,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .DisableCallbackReceiver();",
                                "Key": "rabbitmq-config-disablecallbackreceiver",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "rabbitmq-config-callbackreceiver-thread-count",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .CallbackReceiverMaxConcurrency(10);",
                            "Source": {
                                "StartRow": 55,
                                "EndRow": 60,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .CallbackReceiverMaxConcurrency(10);",
                                "Key": "rabbitmq-config-callbackreceiver-thread-count",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "rabbitmq-config-useconnectionmanager",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .UseConnectionManager<MyConnectionManager>();",
                            "Source": {
                                "StartRow": 66,
                                "EndRow": 71,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .UseConnectionManager<MyConnectionManager>();",
                                "Key": "rabbitmq-config-useconnectionmanager",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sqlserver-config-transactionscope",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();",
                            "Source": {
                                "StartRow": 8,
                                "EndRow": 12,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();",
                                "Key": "sqlserver-config-transactionscope",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sqlserver-config-native-transactions",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();\r\nconfiguration.Transactions()\r\n    .DisableDistributedTransactions();",
                            "Source": {
                                "StartRow": 18,
                                "EndRow": 24,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();\r\nconfiguration.Transactions()\r\n    .DisableDistributedTransactions();",
                                "Key": "sqlserver-config-native-transactions",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sqlserver-config-no-transactions",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();\r\nconfiguration.Transactions().Disable();",
                            "Source": {
                                "StartRow": 30,
                                "EndRow": 35,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();\r\nconfiguration.Transactions().Disable();",
                                "Key": "sqlserver-config-no-transactions",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sqlserver-config-disable-secondaries",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>()\r\n    .DisableCallbackReceiver();",
                            "Source": {
                                "StartRow": 41,
                                "EndRow": 46,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>()\r\n    .DisableCallbackReceiver();",
                                "Key": "sqlserver-config-disable-secondaries",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sqlserver-config-set-secondary-concurrency",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>()\r\n    .CallbackReceiverMaxConcurrency(16);",
                            "Source": {
                                "StartRow": 53,
                                "EndRow": 58,
                                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>()\r\n    .CallbackReceiverMaxConcurrency(16);",
                                "Key": "sqlserver-config-set-secondary-concurrency",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sqlserver-config-callbacks",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "var configuration = new BusConfiguration();\r\nvar bus = Bus.Create(configuration);\r\nvar callback = bus.Send(new Request());\r\ncallback.Register(ProcessResponse);",
                            "Source": {
                                "StartRow": 64,
                                "EndRow": 70,
                                "Value": "var configuration = new BusConfiguration();\r\nvar bus = Bus.Create(configuration);\r\nvar callback = bus.Send(new Request());\r\ncallback.Register(ProcessResponse);",
                                "Key": "sqlserver-config-callbacks",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "Key": "sqlserver-config-callbacks-reply",
            "Versions": [
                {
                    "Version": {
                        "Major": 2,
                        "Minor": null,
                        "Patch": null
                    },
                    "Snippets": [
                        {
                            "Language": "cs",
                            "Value": "bus.Return(42);",
                            "Source": {
                                "StartRow": 73,
                                "EndRow": 76,
                                "Value": "bus.Return(42);",
                                "Key": "sqlserver-config-callbacks-reply",
                                "Language": "cs",
                                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                                "Version": {
                                    "Major": 2,
                                    "Minor": null,
                                    "Patch": null
                                }
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "Snippets": {
        "ErrorsAsMarkdown": "## Snippet errors\r\n\r\n * Duplicate key detected. File:`\\Snippets_4\\EndpointName.cs`. Line:8. Key:`endpointnamefluent`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\EndpointName.cs`. Line:17. Key:`endpointnamebyattribute`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\EndpointName.cs`. Line:25. Key:`endpointnamebynamespace`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\HandlerOrdering.cs`. Line:8. Key:`handlerorderingwithfluent`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\HandlerOrdering.cs`. Line:17. Key:`handlerorderingwithfirst`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\HandlerOrdering.cs`. Line:27. Key:`handlerorderingwithmultiple`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\InstancePerUnitOfWorkRegistration.cs`. Line:9. Key:`instanceperunitofworkregistration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\SendOnly.cs`. Line:10. Key:`sendonly`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Callback\\Callback.cs`. Line:24. Key:`callbacktoaccessmessageregistration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Callback\\Callback.cs`. Line:49. Key:`triggercallback`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Conventions\\ExpressMessages.cs`. Line:8. Key:`expressmessageconvention`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Conventions\\ExpressMessages.cs`. Line:16. Key:`expressmessageattribute`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Conventions\\MessageConventions.cs`. Line:9. Key:`messageconventions`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Distributor\\ConfiguringDistributor.cs`. Line:8. Key:`configuringdistributor`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Distributor\\ConfiguringWorker.cs`. Line:8. Key:`configuringworker`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:12. Key:`encryptionservicesimple`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:20. Key:`definingencryptedpropertiesas`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:26. Key:`messageforencryptionconvention`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:32. Key:`messagewithencryptedproperty`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:39. Key:`encryptionfromiprovideconfiguration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:67. Key:`encryptionfromiencryptionservice`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Gateway\\GatewayConfig.cs`. Line:8. Key:`gatewayconfiguration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Gateway\\GatewayConfig.cs`. Line:16. Key:`sendtosites`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Logging\\MessageToLog.cs`. Line:5. Key:`messagewithtostringlogged`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Logging\\OverrideViaProfile.cs`. Line:6. Key:`loggingconfigwithprofile`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Logging\\UsingLogging.cs`. Line:2. Key:`usinglogging`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Logging\\Log4Net\\Log4NetFiltering.cs`. Line:13. Key:`log4netfiltering`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Persistence\\NHibernate\\ConfiguringNHibernate.cs`. Line:8. Key:`configuringnhibernate`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Sagas\\SagaBasics.cs`. Line:27. Key:`saga-with-started-by`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Sagas\\SagaBasics.cs`. Line:55. Key:`saga-with-started-by-and-correlation-id-set`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\Scheduling\\Scheduling.cs`. Line:10. Key:`scheduletask`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:10. Key:`secondlevelretriesdisable`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:16. Key:`secondlevelretriescustompolicy`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_4\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:23. Key:`secondlevelretriescustompolicyhandler`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\BusExtensionMethodForHandlerReplacement.cs`. Line:6. Key:`busextensionmethodforhandler`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\ContainerCustom.cs`. Line:11. Key:`customcontainers`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Containers.cs`. Line:20. Key:`containers`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\CriticalError.cs`. Line:10. Key:`definecriticalerroraction`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\CriticalError.cs`. Line:25. Key:`raisecriticalerror`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\CustomConfigOverrides.cs`. Line:8. Key:`customconfigoverrides`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\CustomConfigSource.cs`. Line:12. Key:`registercustomconfigsource`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\CustomConfigSource.cs`. Line:23. Key:`customconfigsource`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\CustomConfigSource.cs`. Line:44. Key:`customconfigprovider`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\CustomRavenConfig.cs`. Line:11. Key:`customravenconfig`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DiscardingOldMessages.cs`. Line:8. Key:`discardingoldmessageswithanattribute`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DiscardingOldMessages.cs`. Line:15. Key:`discardingoldmessageswithfluent`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DoNotCreateQueues.cs`. Line:9. Key:`donotcreatequeues`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\EndpointName.cs`. Line:8. Key:`endpointnamefluent`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\EndpointName.cs`. Line:19. Key:`endpointnamebyattribute`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\EndpointName.cs`. Line:30. Key:`endpointnamebynamespace`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\HandlerOrdering.cs`. Line:8. Key:`handlerorderingwithfluent`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\HandlerOrdering.cs`. Line:17. Key:`handlerorderingwithfirst`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\HandlerOrdering.cs`. Line:27. Key:`handlerorderingwithmultiple`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Installers.cs`. Line:8. Key:`installers`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\InstancePerUnitOfWorkRegistration.cs`. Line:9. Key:`instanceperunitofworkregistration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\InstancePerUnitOfWorkRegistration.cs`. Line:19. Key:`unitofworkimplementation`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\InterfaceMessageCreation.cs`. Line:11. Key:`interfacemessagecreation`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\License.cs`. Line:8. Key:`license`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\PerformanceMonitoring.cs`. Line:9. Key:`performancemonitoring`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Persistence.cs`. Line:10. Key:`configurepersistence`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\PurgeOnStartup.cs`. Line:8. Key:`purgeonstartup`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\RunCustomActionReplacement.cs`. Line:8. Key:`runcustomaction`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scheduler.cs`. Line:7. Key:`scheduler`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\SendOnly.cs`. Line:9. Key:`sendonly`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Serialization.cs`. Line:10. Key:`configureserialization`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\StartupActionReplacement.cs`. Line:8. Key:`startupaction`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\StaticConfigureEndpoint.cs`. Line:8. Key:`staticconfigureendpoint`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\SubscriptionSettings.cs`. Line:9. Key:`disableautosubscribe`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\TransactionConfig.cs`. Line:11. Key:`transactionconfig`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Transports.cs`. Line:9. Key:`configuretransports`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Callback\\Callback.cs`. Line:24. Key:`callbacktoaccessmessageregistration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Callback\\Callback.cs`. Line:49. Key:`triggercallback`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Conventions\\ExpressMessages.cs`. Line:8. Key:`expressmessageconvention`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Conventions\\ExpressMessages.cs`. Line:17. Key:`expressmessageattribute`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Conventions\\MessageConventions.cs`. Line:9. Key:`messageconventions`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Conventions\\UnobtrusiveConventions.cs`. Line:4. Key:`unobtrusiveconventions`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:13. Key:`filesharedatabus`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:25. Key:`azuredatabus`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:67. Key:`messagewithlargepayload`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:77. Key:`messagewithlargepayloadusingconvention`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:91. Key:`definemessagewithlargepayloadusingconvention`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Distributor\\ConfiguringDistributor.cs`. Line:8. Key:`configuringdistributor`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Distributor\\ConfiguringWorker.cs`. Line:8. Key:`configuringworker`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:12. Key:`encryptionservicesimple`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:21. Key:`definingencryptedpropertiesas`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:28. Key:`messageforencryptionconvention`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:34. Key:`messagewithencryptedproperty`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:57. Key:`encryptionfromiprovideconfiguration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:79. Key:`encryptionfromiencryptionservice`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Gateway\\GatewayConfig.cs`. Line:9. Key:`gatewayconfiguration`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Gateway\\GatewayConfig.cs`. Line:19. Key:`sendtosites`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:35. Key:`header-incoming-mutator`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:46. Key:`header-outgoing-mutator`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:56. Key:`header-incoming-handler`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:69. Key:`header-outgoing-handler`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\HostIdentifier\\HostIdFixer.cs`. Line:13. Key:`hostidfixer`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Logging\\MessageToLog.cs`. Line:5. Key:`messagewithtostringlogged`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Logging\\OverrideViaProfile.cs`. Line:7. Key:`loggingconfigwithprofile`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Logging\\UsingLogging.cs`. Line:2. Key:`usinglogging`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Logging\\Log4Net\\Log4NetFiltering.cs`. Line:13. Key:`log4netfiltering`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Logging\\NLog\\NLogFiltering.cs`. Line:11. Key:`nlogfiltering`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Monitoring\\MessageFailedHandler.cs`. Line:6. Key:`messagefailedhandler`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Persistence\\NHibernate\\ConfiguringNHibernate.cs`. Line:9. Key:`configuringnhibernate`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\RavenDB\\ConfiguringTransactionRecoveryStorage.cs`. Line:11. Key:`configuringtransactionrecoverystorage`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:14. Key:`saga-without-started-by`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:61. Key:`saga-with-started-by`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:117. Key:`saga-with-started-by-and-correlation-id-set`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:317. Key:`saga-configure-self-hosted`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:378. Key:`saga-data`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaMapping.cs`. Line:9. Key:`configurehowtofindsaga`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:19. Key:`scanningdefault`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:25. Key:`scanninglistofassemblies`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:31. Key:`scanningparamarrayofassemblies`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:37. Key:`scanningcustomdirectory`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:43. Key:`scanninglistoftypes`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:49. Key:`scanningexcludebyname`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:55. Key:`scanningincludebypattern`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:61. Key:`scanningmixingincludeandexclude`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\Scheduling\\Scheduling.cs`. Line:11. Key:`scheduletask`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:13. Key:`secondlevelretriesdisable`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:19. Key:`secondlevelretriescustompolicy`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:27. Key:`secondlevelretriescustompolicyhandler`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\AdditionalServices.cs`. Line:9. Key:`testingadditionaldependencies`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\HeaderManipulation.cs`. Line:9. Key:`testingheadermanipulation`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\Saga.cs`. Line:11. Key:`testingsaga`. Version:``\r\n * Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\ServiceLayer.cs`. Line:9. Key:`testingservicelayer`. Version:``\r\n\r\n",
        "Snippets": [
            {
                "StartRow": 8,
                "EndRow": 12,
                "Value": "Configure.With()\r\n    .DefineEndpointName(\"MyEndpoint\");",
                "Key": "endpointnamefluent",
                "Language": "cs",
                "File": "\\Snippets_3\\EndpointName.cs",
                "Version": null
            },
            {
                "StartRow": 17,
                "EndRow": 21,
                "Value": "[EndpointName(\"MyEndpointName\")]\r\npublic class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n{\r\n    // ... your custom config",
                "Key": "endpointnamebyattribute",
                "Language": "cs",
                "File": "\\Snippets_3\\EndpointName.cs",
                "Version": null
            },
            {
                "StartRow": 25,
                "EndRow": 30,
                "Value": "namespace MyServer\r\n{\r\n    public class EndpointConfig : IConfigureThisEndpoint, AsA_Server\r\n    {\r\n        // ... your custom config",
                "Key": "endpointnamebynamespace",
                "Language": "cs",
                "File": "\\Snippets_3\\EndpointName.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 13,
                "Value": "Configure.With()\r\n    .UnicastBus()\r\n    .LoadMessageHandlers(First<HandlerB>.Then<HandlerA>().AndThen<HandlerC>());",
                "Key": "handlerorderingwithfluent",
                "Language": "cs",
                "File": "\\Snippets_3\\HandlerOrdering.cs",
                "Version": null
            },
            {
                "StartRow": 17,
                "EndRow": 24,
                "Value": "public class MySpecifyingFirst : ISpecifyMessageHandlerOrdering\r\n{\r\n    public void SpecifyOrder(Order order)\r\n    {\r\n        order.SpecifyFirst<HandlerB>();\r\n    }\r\n}",
                "Key": "handlerorderingwithfirst",
                "Language": "cs",
                "File": "\\Snippets_3\\HandlerOrdering.cs",
                "Version": null
            },
            {
                "StartRow": 27,
                "EndRow": 34,
                "Value": "public class MySpecifyingOrder : ISpecifyMessageHandlerOrdering\r\n{\r\n    public void SpecifyOrder(Order order)\r\n    {\r\n        order.Specify(First<HandlerB>.Then<HandlerA>().AndThen<HandlerC>());\r\n    }\r\n}",
                "Key": "handlerorderingwithmultiple",
                "Language": "cs",
                "File": "\\Snippets_3\\HandlerOrdering.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 12,
                "Value": "var configuration = Configure.With();\r\nconfiguration.Configurer.ConfigureComponent<MyService>(DependencyLifecycle.InstancePerCall);",
                "Key": "instanceperunitofworkregistration",
                "Language": "cs",
                "File": "\\Snippets_3\\InstancePerUnitOfWorkRegistration.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 17,
                "Value": "var bus = Configure.With()\r\n    .DefaultBuilder()\r\n    //Other config\r\n    .UnicastBus()\r\n    .SendOnly();",
                "Key": "sendonly",
                "Language": "cs",
                "File": "\\Snippets_3\\SendOnly.cs",
                "Version": null
            },
            {
                "StartRow": 24,
                "EndRow": 35,
                "Value": "var sync = bus.Send(placeOrder)\r\n    .Register(ar =>\r\n    {\r\n        var localResult = ar.AsyncState as CompletionResult;\r\n        message = localResult.Messages[0] as PlaceOrderResponse;\r\n    }, null);\r\n\r\nsync.AsyncWaitHandle.WaitOne();\r\n// return message;",
                "Key": "callbacktoaccessmessageregistration",
                "Language": "cs",
                "File": "\\Snippets_3\\Callback\\Callback.cs",
                "Version": null
            },
            {
                "StartRow": 49,
                "EndRow": 52,
                "Value": "bus.Return(Status.OK);",
                "Key": "triggercallback",
                "Language": "cs",
                "File": "\\Snippets_3\\Callback\\Callback.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 12,
                "Value": "var configure = Configure.With()\r\n    .DefiningExpressMessagesAs(t => t.Name.EndsWith(\"Express\"));",
                "Key": "expressmessageconvention",
                "Language": "cs",
                "File": "\\Snippets_3\\Conventions\\ExpressMessages.cs",
                "Version": null
            },
            {
                "StartRow": 16,
                "EndRow": 18,
                "Value": "[Express]\r\npublic class MyMessage : IMessage { }",
                "Key": "expressmessageattribute",
                "Language": "cs",
                "File": "\\Snippets_3\\Conventions\\ExpressMessages.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 22,
                "Value": "// NOTE: When you're self hosting, '.DefiningXXXAs()' has to be before '.UnicastBus()', \r\n// otherwise you'll get: 'System.InvalidOperationException: \"No destination specified for message(s): MessageTypeName\"\r\n\r\nvar configure = Configure.With()\r\n    .DefaultBuilder()\r\n    .DefiningCommandsAs(t => t.Namespace == \"MyNamespace\" && t.Namespace.EndsWith(\"Commands\"))\r\n    .DefiningEventsAs(t => t.Namespace == \"MyNamespace\" && t.Namespace.EndsWith(\"Events\"))\r\n    .DefiningMessagesAs(t => t.Namespace == \"Messages\")\r\n    .DefiningEncryptedPropertiesAs(p => p.Name.StartsWith(\"Encrypted\"))\r\n    .DefiningDataBusPropertiesAs(p => p.Name.EndsWith(\"DataBus\"))\r\n    .DefiningExpressMessagesAs(t => t.Name.EndsWith(\"Express\"))\r\n    .DefiningTimeToBeReceivedAs(t => t.Name.EndsWith(\"Expires\") ? TimeSpan.FromSeconds(30) : TimeSpan.MaxValue);",
                "Key": "messageconventions",
                "Language": "cs",
                "File": "\\Snippets_3\\Conventions\\MessageConventions.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 27,
                "Value": "// --------------------------------------\r\n// Running the Distributor and a Worker\r\nConfigure.With()\r\n    .AsMasterNode();\r\n//or \r\nConfigure.With()\r\n    .RunDistributor();\r\n// --------------------------------------\r\n\r\n// --------------------------------------\r\n// Running the Distributor only\r\nConfigure.With()\r\n    .RunDistributorWithNoWorkerOnItsEndpoint();\r\n//or\r\nConfigure.With()\r\n    .RunDistributor(false);\r\n// --------------------------------------",
                "Key": "configuringdistributor",
                "Language": "cs",
                "File": "\\Snippets_3\\Distributor\\ConfiguringDistributor.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 10,
                "Value": "Configure.With()\r\n    .EnlistWithDistributor();",
                "Key": "configuringworker",
                "Language": "cs",
                "File": "\\Snippets_3\\Distributor\\ConfiguringWorker.cs",
                "Version": null
            },
            {
                "StartRow": 12,
                "EndRow": 14,
                "Value": "Configure.With()\r\n    .RijndaelEncryptionService();",
                "Key": "encryptionservicesimple",
                "Language": "cs",
                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 19,
                "EndRow": 21,
                "Value": "Configure.With()\r\n    .DefiningEncryptedPropertiesAs(info => info.Name.EndsWith(\"EncryptedProperty\"));",
                "Key": "definingencryptedpropertiesas",
                "Language": "cs",
                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 25,
                "EndRow": 29,
                "Value": "public class MyMessage1 : IMessage\r\n{\r\n    public string MyEncryptedProperty { get; set; }\r\n}",
                "Key": "messageforencryptionconvention",
                "Language": "cs",
                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 32,
                "EndRow": 36,
                "Value": "public class MyMessage2 : IMessage\r\n{\r\n    public WireEncryptedString MyEncryptedProperty { get; set; }\r\n}",
                "Key": "messagewithencryptedproperty",
                "Language": "cs",
                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 39,
                "EndRow": 62,
                "Value": "public class ConfigureEncryption : \r\n    IProvideConfiguration<RijndaelEncryptionServiceConfig>\r\n{\r\n    public RijndaelEncryptionServiceConfig GetConfiguration()\r\n    {\r\n        return new RijndaelEncryptionServiceConfig\r\n        {\r\n            Key = \"gdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\",\r\n            ExpiredKeys = new RijndaelExpiredKeyCollection\r\n            \t\t{\r\n                \t\tnew RijndaelExpiredKey\r\n                \t\t{\r\n                \t\t    Key = \"abDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                \t\t},\r\n\t\t                    new RijndaelExpiredKey\r\n\t\t                    {\r\n\t\t                        Key = \"cdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n\t\t                    }\r\n\t\t\t\t\t\t}\r\n        };\r\n    }\r\n}",
                "Key": "encryptionfromiprovideconfiguration",
                "Language": "cs",
                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 67,
                "EndRow": 70,
                "Value": "//where MyCustomEncryptionService implements IEncryptionService \r\nConfigure.With()\r\n    .Configurer.RegisterSingleton<IEncryptionService>(new MyCustomEncryptionService());",
                "Key": "encryptionfromiencryptionservice",
                "Language": "cs",
                "File": "\\Snippets_3\\Encryption\\PropertyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 11,
                "Value": "Configure.Instance.RunGateway();",
                "Key": "gatewayconfiguration",
                "Language": "cs",
                "File": "\\Snippets_3\\Gateway\\GatewayConfig.cs",
                "Version": null
            },
            {
                "StartRow": 16,
                "EndRow": 19,
                "Value": "Bus.SendToSites(new[] { \"SiteA\", \"SiteB\" }, new MyCrossSiteMessage());",
                "Key": "sendtosites",
                "Language": "cs",
                "File": "\\Snippets_3\\Gateway\\GatewayConfig.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 17,
                "Value": "public class SampleIncomingMutator : IMutateIncomingTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                "Key": "header-incoming-mutator",
                "Language": "cs",
                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 19,
                "EndRow": 27,
                "Value": "public class SampleOutgoingMutator : IMutateOutgoingTransportMessages\r\n{\r\n    public void MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                "Key": "header-outgoing-mutator",
                "Language": "cs",
                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 29,
                "EndRow": 40,
                "Value": "public class SampleReadHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.CurrentMessageContext.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                "Key": "header-incoming-handler",
                "Language": "cs",
                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 42,
                "EndRow": 52,
                "Value": "public class SampleWriteHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.OutgoingHeaders;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                "Key": "header-outgoing-handler",
                "Language": "cs",
                "File": "\\Snippets_3\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 5,
                "EndRow": 21,
                "Value": "public class MessageToLog : IMessage\r\n{\r\n    public Guid EventId { get; set; }\r\n    public DateTime? Time { get; set; }\r\n    public TimeSpan Duration { get; set; }\r\n\r\n    public override string ToString()\r\n    {\r\n        return string.Format(\r\n            \"MyMessage: EventId={0}, Time={1}, Duration={2}\",\r\n            EventId, Time, Duration\r\n            );\r\n    }\r\n}",
                "Key": "messagewithtostringlogged",
                "Language": "cs",
                "File": "\\Snippets_3\\Logging\\MessageToLog.cs",
                "Version": null
            },
            {
                "StartRow": 6,
                "EndRow": 17,
                "Value": "public class YourProfileLoggingHandler : \r\n    IConfigureLoggingForProfile<YourProfile>\r\n{\r\n    public void Configure(IConfigureThisEndpoint specifier)\r\n    {\r\n        // setup your logging infrastructure then call\r\n        SetLoggingLibrary.Log4Net();\r\n    }\r\n}",
                "Key": "loggingconfigwithprofile",
                "Language": "cs",
                "File": "\\Snippets_3\\Logging\\OverrideViaProfile.cs",
                "Version": null
            },
            {
                "StartRow": 2,
                "EndRow": 13,
                "Value": "using log4net;\r\n\r\npublic class ClassUsingLogging\r\n{\r\n    public void SomeMethod()\r\n    {\r\n        //your code\r\n        Logger.Debug(\"Something interesting happened.\");\r\n    }\r\n    static ILog Logger = LogManager.GetLogger(\"Name\");\r\n}",
                "Key": "usinglogging",
                "Language": "cs",
                "File": "\\Snippets_3\\Logging\\UsingLogging.cs",
                "Version": null
            },
            {
                "StartRow": 14,
                "EndRow": 32,
                "Value": "var appender = new ColoredConsoleAppender\r\n{\r\n    Threshold = Level.Debug,\r\n    Layout = new SimpleLayout(),\r\n};\r\n\r\nappender.AddFilter(new LoggerMatchFilter\r\n                   {\r\n                       LoggerToMatch = \"MyNamespace\"\r\n                   });\r\nappender.AddFilter(new DenyAllFilter());\r\nappender.ActivateOptions();\r\n\r\nBasicConfigurator.Configure(appender);\r\n\r\nSetLoggingLibrary.Log4Net();",
                "Key": "log4netfiltering",
                "Language": "cs",
                "File": "\\Snippets_3\\Logging\\Log4Net\\Log4NetFiltering.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 15,
                "Value": "Configure.With()\r\n            .DefaultBuilder()\r\n            .NHibernateSagaPersister()\r\n            .UseNHibernateTimeoutPersister()\r\n            .DBSubcriptionStorage();",
                "Key": "configuringnhibernate",
                "Language": "cs",
                "File": "\\Snippets_3\\Persistence\\NHibernate\\ConfiguringNHibernate.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 32,
                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(s => s.SomeID, m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        // code to handle Message1\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                "Key": "saga-with-started-by",
                "Language": "cs",
                "File": "\\Snippets_3\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 38,
                "EndRow": 59,
                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(s => s.SomeID, m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                "Key": "saga-with-started-by-and-correlation-id-set",
                "Language": "cs",
                "File": "\\Snippets_3\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 20,
                "Value": "// 'Schedule' is a static class that can be accessed anywhere. \r\n// To send a message every 5 minutes\r\nSchedule.Every(TimeSpan.FromMinutes(5))\r\n    .Action(() => bus.Send(new CallLegacySystem()));\r\n\r\n// Name a schedule task and invoke it every 5 minutes\r\nSchedule.Every(TimeSpan.FromMinutes(5))\r\n    .Action(\"Task name\", SomeCustomMethod);",
                "Key": "scheduletask",
                "Language": "cs",
                "File": "\\Snippets_3\\Scheduling\\Scheduling.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 14,
                "Value": "Configure.Instance.DisableSecondLevelRetries();",
                "Key": "secondlevelretriesdisable",
                "Language": "cs",
                "File": "\\Snippets_3\\SecondLevelRetries\\SecondLevelRetriesConfig.cs",
                "Version": null
            },
            {
                "StartRow": 17,
                "EndRow": 20,
                "Value": "SecondLevelRetries.RetryPolicy = MyCustomRetryPolicy;",
                "Key": "secondlevelretriescustompolicy",
                "Language": "cs",
                "File": "\\Snippets_3\\SecondLevelRetries\\SecondLevelRetriesConfig.cs",
                "Version": null
            },
            {
                "StartRow": 24,
                "EndRow": 50,
                "Value": "TimeSpan MyCustomRetryPolicy(TransportMessage message)\r\n{\r\n    // retry max 3 times\r\n    if (GetNumberOfRetries(message) >= 3)\r\n    {\r\n        // sending back a TimeSpan.MinValue tells the \r\n        // SecondLevelRetry not to retry this message\r\n        return TimeSpan.MinValue;\r\n    }\r\n\r\n    return TimeSpan.FromSeconds(5);\r\n}\r\n\r\nstatic int GetNumberOfRetries(TransportMessage message)\r\n{\r\n    string value;\r\n    if (message.Headers.TryGetValue(Headers.Retries, out value))\r\n    {\r\n        int i;\r\n        if (int.TryParse(value, out i))\r\n        {\r\n            return i;\r\n        }\r\n    }\r\n    return 0;\r\n}",
                "Key": "secondlevelretriescustompolicyhandler",
                "Language": "cs",
                "File": "\\Snippets_3\\SecondLevelRetries\\SecondLevelRetriesConfig.cs",
                "Version": null
            },
            {
                "StartRow": 6,
                "EndRow": 13,
                "Value": "public class MyHandler : IHandleMessages<MyMessage>\r\n{\r\n    public void Handle(MyMessage message)\r\n    {\r\n        this.Bus().Reply(new OtherMessage());\r\n    }\r\n}",
                "Key": "busextensionmethodforhandler",
                "Language": "cs",
                "File": "\\Snippets_4\\BusExtensionMethodForHandler.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 20,
                "Value": "public void CustomContainerUsage()\r\n{\r\n    //Call 'Configure.UsingContainer<T>()' in your configuration\r\n    Configure.With()\r\n        .UsingContainer<MyCustomObjectBuilder>();\r\n}\r\n\r\n//Create a class that implements 'IContainer'\r\npublic class MyCustomObjectBuilder : IContainer\r\n{",
                "Key": "customcontainers",
                "Language": "cs",
                "File": "\\Snippets_4\\ContainerCustom.cs",
                "Version": null
            },
            {
                "StartRow": 14,
                "EndRow": 35,
                "Value": "// Autofac\r\nConfigure.With()\r\n    .UsingContainer<AutofacObjectBuilder>();\r\n\r\n// Ninject\r\nConfigure.With()\r\n    .UsingContainer<NinjectObjectBuilder>();\r\n\r\n// Unity\r\nConfigure.With()\r\n    .UsingContainer<UnityObjectBuilder>();\r\n\r\n// Spring\r\nConfigure.With()\r\n    .UsingContainer<SpringObjectBuilder>();\r\n\r\n// StructureMap\r\nConfigure.With()\r\n    .UsingContainer<StructureMapObjectBuilder>();",
                "Key": "containers",
                "Language": "cs",
                "File": "\\Snippets_4\\Containers.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 19,
                "Value": "// Configuring how NServicebus handles critical errors\r\nConfigure.With().DefineCriticalErrorAction((message, exception) =>\r\n{\r\n    var output = string.Format(\"We got a critical exception: '{0}'\\r\\n{1}\", message, exception);\r\n    Console.WriteLine(output);\r\n    // Perhaps end the process??\r\n});",
                "Key": "definecriticalerroraction",
                "Language": "cs",
                "File": "\\Snippets_4\\CriticalError.cs",
                "Version": null
            },
            {
                "StartRow": 26,
                "EndRow": 30,
                "Value": "// Configuring how NServicebus handles critical errors\r\nConfigure.With().RaiseCriticalError(\"The message\", theException);",
                "Key": "raisecriticalerror",
                "Language": "cs",
                "File": "\\Snippets_4\\CriticalError.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 14,
                "Value": "var configure = Configure.With(AllAssemblies.Except(\"NotThis.dll\"))\r\n    .DefaultBuilder();\r\nconfigure.DefineEndpointName(\"MyEndpointName\");\r\nconfigure.DefiningEventsAs(type => type.Name.EndsWith(\"Event\"));",
                "Key": "customconfigoverrides",
                "Language": "cs",
                "File": "\\Snippets_4\\CustomConfigOverrides.cs",
                "Version": null
            },
            {
                "StartRow": 12,
                "EndRow": 17,
                "Value": "Configure.With()\r\n    //this call needs to happen right after With()\r\n    .CustomConfigurationSource(new MyCustomConfigurationSource()); ",
                "Key": "registercustomconfigsource",
                "Language": "cs",
                "File": "\\Snippets_4\\CustomConfigSource.cs",
                "Version": null
            },
            {
                "StartRow": 22,
                "EndRow": 40,
                "Value": "public class MyCustomConfigurationSource : IConfigurationSource\r\n{\r\n    public T GetConfiguration<T>() where T : class, new()\r\n    {\r\n        // the part you are overriding\r\n        if (typeof(T) == typeof(RijndaelEncryptionServiceConfig))\r\n        {\r\n            return new RijndaelEncryptionServiceConfig\r\n                   {\r\n                       Key = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                   } as T;\r\n        }\r\n        // leaving the rest of the configuration as is:\r\n        return ConfigurationManager.GetSection(typeof(T).Name) as T;\r\n    }\r\n}",
                "Key": "customconfigsource",
                "Language": "cs",
                "File": "\\Snippets_4\\CustomConfigSource.cs",
                "Version": null
            },
            {
                "StartRow": 43,
                "EndRow": 55,
                "Value": "class CustomRijndaelEncryptionServiceConfigProvider : IProvideConfiguration<RijndaelEncryptionServiceConfig>\r\n{\r\n    public RijndaelEncryptionServiceConfig GetConfiguration()\r\n    {\r\n        return new RijndaelEncryptionServiceConfig\r\n               {\r\n                   Key = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n               };\r\n    }\r\n}",
                "Key": "customconfigprovider",
                "Language": "cs",
                "File": "\\Snippets_4\\CustomConfigSource.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 10,
                "Value": "Configure.With().RavenPersistence(\"http://localhost:8080\", \"MyDatabase\");",
                "Key": "customravenconfig",
                "Language": "cs",
                "File": "\\Snippets_4\\CustomRavenConfig.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 20,
                "Value": "Configure.With()\r\n   .DefaultBuilder()\r\n   .RavenPersistence()\r\n   .RavenSagaPersister()\r\n   .RavenSubscriptionStorage()\r\n   .UseRavenTimeoutPersister()\r\n   .UseRavenGatewayDeduplication()\r\n   .UseRavenGatewayPersister();",
                "Key": "oldravendbpersistenceinitialization",
                "Language": "cs",
                "File": "\\Snippets_4\\CustomRavenConfigForVersion2_5.cs",
                "Version": null
            },
            {
                "StartRow": 29,
                "EndRow": 38,
                "Value": "Configure.With()\r\n   .DefaultBuilder()\r\n   .RavenDBStorage() // Need to call this method\r\n   .UseRavenDBSagaStorage() // Call this method to use Raven saga storage\r\n   .UseRavenDBSubscriptionStorage() // Call this method to use Raven subscription storage\r\n   .UseRavenDBTimeoutStorage() // Call this method to use Raven timeout storage\r\n   .UseRavenDBGatewayDeduplicationStorage() // Call this method to use Raven deduplication storage for the Gateway\r\n   .UseRavenDBGatewayStorage(); // Call this method to use the  Raven Gateway storage method",
                "Key": "version2_5ravendbpersistenceinitialization",
                "Language": "cs",
                "File": "\\Snippets_4\\CustomRavenConfigForVersion2_5.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 10,
                "Value": "[TimeToBeReceived(\"00:01:00\")] // Discard after one minute\r\npublic class MyMessage { }",
                "Key": "discardingoldmessageswithanattribute",
                "Language": "cs",
                "File": "\\Snippets_4\\DiscardingOldMessages.cs",
                "Version": null
            },
            {
                "StartRow": 15,
                "EndRow": 26,
                "Value": "var configure = Configure.With()\r\n    .DefiningTimeToBeReceivedAs(type =>\r\n    {\r\n        if (type == typeof(MyMessage))\r\n        {\r\n            return TimeSpan.FromHours(1);\r\n        }\r\n        return TimeSpan.MaxValue;\r\n    });",
                "Key": "discardingoldmessageswithfluent",
                "Language": "cs",
                "File": "\\Snippets_4\\DiscardingOldMessages.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 10,
                "Value": "Configure.With().DoNotCreateQueues();",
                "Key": "donotcreatequeues",
                "Language": "cs",
                "File": "\\Snippets_4\\DoNotCreateQueues.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 15,
                "Value": "Configure.With()\r\n    .UnicastBus()\r\n    .CreateBus()\r\n    .Start(() => Configure.Instance.ForInstallationOn<Windows>().Install());",
                "Key": "installers",
                "Language": "cs",
                "File": "\\Snippets_4\\Installers.cs",
                "Version": null
            },
            {
                "StartRow": 18,
                "EndRow": 31,
                "Value": "public class MyUnitOfWork : IManageUnitsOfWork\r\n{\r\n    public void Begin()\r\n    {\r\n        // Do your custom work here\r\n    }\r\n\r\n    public void End(System.Exception ex = null)\r\n    {\r\n        // Do your custom work here\r\n    }\r\n}",
                "Key": "unitofworkimplementation",
                "Language": "cs",
                "File": "\\Snippets_4\\InstancePerUnitOfWorkRegistration.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 23,
                "Value": "var message = Bus.CreateInstance<MyInterfaceMessage>(o =>\r\n{\r\n    o.OrderNumber = 1234;\r\n});\r\nBus.Publish(message);\r\n\r\nBus.Publish<MyInterfaceMessage>(o =>\r\n{\r\n    o.OrderNumber = 1234;\r\n});",
                "Key": "interfacemessagecreation",
                "Language": "cs",
                "File": "\\Snippets_4\\InterfaceMessageCreation.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 12,
                "Value": "Configure.With().LicensePath(\"PathToLicense\");\r\n//or\r\nConfigure.With().License(\"YourCustomLicenseText\");",
                "Key": "license",
                "Language": "cs",
                "File": "\\Snippets_4\\License.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 16,
                "Value": "Configure.With()\r\n    .EnablePerformanceCounters();\r\n\r\nConfigure.With()\r\n    .SetEndpointSLA(TimeSpan.FromMinutes(3));",
                "Key": "performancemonitoring",
                "Language": "cs",
                "File": "\\Snippets_4\\PerformanceMonitoring.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 35,
                "Value": "// Configure to use InMemory \r\nConfigure.With().InMemorySagaPersister();\r\nConfigure.With().UseInMemoryTimeoutPersister();\r\nConfigure.With().InMemorySubscriptionStorage();\r\nConfigure.With().RunGatewayWithInMemoryPersistence();\r\nConfigure.With().UseInMemoryGatewayDeduplication();\r\n\r\n// Configure to use NHibernate\r\nConfigure.With().UseNHibernateSagaPersister();\r\nConfigure.With().UseNHibernateTimeoutPersister();\r\nConfigure.With().UseNHibernateSubscriptionPersister();\r\nConfigure.With().UseNHibernateGatewayPersister();\r\nConfigure.With().UseNHibernateGatewayDeduplication();\r\n\r\n// Configure to use RavenDB for everything\r\nConfigure.With().RavenPersistence();\r\n\r\n// Configure to use RavenDB\r\nConfigure.With().RavenSagaPersister();\r\nConfigure.With().UseRavenTimeoutPersister();\r\nConfigure.With().RavenSubscriptionStorage();\r\nConfigure.With().RunGatewayWithRavenPersistence();\r\nConfigure.With().UseNHibernateGatewayDeduplication();",
                "Key": "configurepersistence",
                "Language": "cs",
                "File": "\\Snippets_4\\Persistence.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 12,
                "Value": "Configure.With()\r\n    .PurgeOnStartup(true);",
                "Key": "purgeonstartup",
                "Language": "cs",
                "File": "\\Snippets_4\\PurgeOnStartup.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 14,
                "Value": "Configure.With().UnicastBus()\r\n    .RunCustomAction(MyCustomAction)\r\n    .CreateBus()\r\n    .Start();",
                "Key": "runcustomaction",
                "Language": "cs",
                "File": "\\Snippets_4\\RunCustomAction.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 17,
                "Value": "public class MySaga : Saga<MySagaData>,\r\n    IAmStartedByMessages<Message1>,\r\n    IHandleMessages<Message2>\r\n{\r\n    public override void ConfigureHowToFindSaga()\r\n    {\r\n        ConfigureMapping<Message2>(m => m.SomeID)\r\n            .ToSaga(s => s.SomeID);\r\n    }",
                "Key": "configurehowtofindsaga",
                "Language": "cs",
                "File": "\\Snippets_4\\SagaMapping.cs",
                "Version": null
            },
            {
                "StartRow": 7,
                "EndRow": 32,
                "Value": "public class ScheduleMyTasks : IWantToRunWhenBusStartsAndStops\r\n{\r\n    IBus bus;\r\n\r\n    public ScheduleMyTasks(IBus bus)\r\n    {\r\n        this.bus = bus;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        // To send a message every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action(() => bus.SendLocal(new MyMessage()));\r\n\r\n        // Name a schedule task and invoke it every 5 minutes\r\n        Schedule.Every(TimeSpan.FromMinutes(5))\r\n            .Action(\"Task name\", () => bus.SendLocal(new MyMessage()));\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n    }\r\n}",
                "Key": "scheduler",
                "Language": "cs",
                "File": "\\Snippets_4\\Scheduler.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 16,
                "Value": "Configure.Serialization.Binary();\r\nConfigure.Serialization.Bson();\r\nConfigure.Serialization.Json();\r\nConfigure.Serialization.Xml();",
                "Key": "configureserialization",
                "Language": "cs",
                "File": "\\Snippets_4\\Serialization.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 13,
                "Value": "Configure.With().UnicastBus()\r\n    .CreateBus()\r\n    .Start(MyStartupAction);",
                "Key": "startupaction",
                "Language": "cs",
                "File": "\\Snippets_4\\StartupAction.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 14,
                "Value": "Configure.Endpoint.AsSendOnly();\r\nConfigure.Endpoint.AsVolatile();\r\nConfigure.Endpoint.Advanced(settings => settings.DisableDurableMessages());\r\nConfigure.Endpoint.Advanced(settings => settings.EnableDurableMessages());",
                "Key": "staticconfigureendpoint",
                "Language": "cs",
                "File": "\\Snippets_4\\StaticConfigureEndpoint.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 12,
                "Value": "Configure.Features.Disable<AutoSubscribe>();",
                "Key": "disableautosubscribe",
                "Language": "cs",
                "File": "\\Snippets_4\\SubscriptionSettings.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 16,
                "Value": "//Enable\r\nConfigure.Transactions.Enable();\r\n\r\n// Disable\r\nConfigure.Transactions.Disable();",
                "Key": "transactionconfig",
                "Language": "cs",
                "File": "\\Snippets_4\\TransactionConfig.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 22,
                "Value": "// Configure to use MSMQ \r\nConfigure.With().UseTransport<Msmq>();\r\n\r\n// Configure to use AzureStorageQueue\r\nConfigure.With().UseTransport<AzureStorageQueue>();\r\n\r\n// Configure to use AzureServiceBus\r\nConfigure.With().UseTransport<AzureServiceBus>();\r\n\r\n// Configure to use SqlServer\r\nConfigure.With().UseTransport<SqlServer>();",
                "Key": "configuretransports",
                "Language": "cs",
                "File": "\\Snippets_4\\Transports.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 15,
                "Value": ".DefiningMessagesAs(t => \r\n    t.Namespace != null && \r\n    t.Namespace.EndsWith(\"Messages\"));",
                "Key": "unobtrusiveconventionsfaqerror",
                "Language": "cs",
                "File": "\\Snippets_4\\Conventions\\FaqUnobtrusiveConventions.cs",
                "Version": null
            },
            {
                "StartRow": 20,
                "EndRow": 26,
                "Value": ".DefiningMessagesAs(t =>\r\n    t.Namespace != null &&\r\n    t.Namespace.StartsWith(\"MyCompany\") &&\r\n    t.Namespace.EndsWith(\"Messages\"));",
                "Key": "unobtrusiveconventionsfaqfix",
                "Language": "cs",
                "File": "\\Snippets_4\\Conventions\\FaqUnobtrusiveConventions.cs",
                "Version": null
            },
            {
                "StartRow": 4,
                "EndRow": 17,
                "Value": "public class UnobtrusiveConventions : IWantToRunBeforeConfiguration\r\n{\r\n    public void Init()\r\n    {\r\n        Configure.Instance\r\n            .DefiningCommandsAs(t => t.Namespace != null\r\n                                     && t.Namespace.StartsWith(\"MyCompany\")\r\n                                     && t.Namespace.EndsWith(\"Commands\"))\r\n            .DefiningEventsAs(t => t.Namespace != null\r\n                                   && t.Namespace.StartsWith(\"MyCompany\")\r\n                                   && t.Namespace.EndsWith(\"Events\"));\r\n    }\r\n}",
                "Key": "unobtrusiveconventions",
                "Language": "cs",
                "File": "\\Snippets_4\\Conventions\\UnobtrusiveConventions.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 14,
                "Value": "var configure = Configure.With()\r\n    .FileShareDataBus(databusPath);",
                "Key": "filesharedatabus",
                "Language": "cs",
                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                "Version": null
            },
            {
                "StartRow": 20,
                "EndRow": 24,
                "Value": "Configure.With()\r\n    .AzureDataBus();",
                "Key": "azuredatabus",
                "Language": "cs",
                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                "Version": null
            },
            {
                "StartRow": 31,
                "EndRow": 38,
                "Value": "public class MessageWithLargePayload\r\n{\r\n    public string SomeProperty { get; set; }\r\n    public DataBusProperty<byte[]> LargeBlob { get; set; }\r\n}",
                "Key": "messagewithlargepayload",
                "Language": "cs",
                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                "Version": null
            },
            {
                "StartRow": 41,
                "EndRow": 48,
                "Value": "public class MessageWithLargePayloadUsingConvention\r\n{\r\n    public string SomeProperty { get; set; }\r\n    public byte[] LargeBlobDataBus { get; set; }\r\n}",
                "Key": "messagewithlargepayloadusingconvention",
                "Language": "cs",
                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                "Version": null
            },
            {
                "StartRow": 55,
                "EndRow": 58,
                "Value": "configuration.DefiningDataBusPropertiesAs(p => p.Name.EndsWith(\"DataBus\"));",
                "Key": "definemessagewithlargepayloadusingconvention",
                "Language": "cs",
                "File": "\\Snippets_4\\DataBus\\DataBus.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 20,
                "Value": "public class SampleIncomingBehavior : IBehavior<ReceivePhysicalMessageContext>\r\n{\r\n    public void Invoke(ReceivePhysicalMessageContext context, Action next)\r\n    {\r\n        var headers = context.PhysicalMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n        next();\r\n    }\r\n}",
                "Key": "header-incoming-behavior",
                "Language": "cs",
                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 22,
                "EndRow": 31,
                "Value": "public class SampleOutgoingBehavior : IBehavior<SendPhysicalMessageContext>\r\n{\r\n    public void Invoke(SendPhysicalMessageContext context, Action next)\r\n    {\r\n        var headers = context.MessageToSend.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n        next();\r\n    }\r\n}",
                "Key": "header-outgoing-in-behavior",
                "Language": "cs",
                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 33,
                "EndRow": 42,
                "Value": "public class SampleIncomingMutator : IMutateIncomingTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                "Key": "header-incoming-in-mutator",
                "Language": "cs",
                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 44,
                "EndRow": 52,
                "Value": "public class SampleOutgoingMutator : IMutateOutgoingTransportMessages\r\n{\r\n    public void MutateOutgoing(object[] messages, TransportMessage transportMessage)\r\n    {\r\n        var headers = transportMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                "Key": "header-outgoing-in-mutator",
                "Language": "cs",
                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 54,
                "EndRow": 65,
                "Value": "public class SampleReadHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.CurrentMessageContext.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n    }\r\n}",
                "Key": "header-incoming-in-handler",
                "Language": "cs",
                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 67,
                "EndRow": 77,
                "Value": "public class SampleWriteHandler : IHandleMessages<MyMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var headers = Bus.OutgoingHeaders;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n    }\r\n}",
                "Key": "header-outgoing-in-handler",
                "Language": "cs",
                "File": "\\Snippets_4\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 5,
                "EndRow": 13,
                "Value": "class MyEndpointConfig : IConfigureThisEndpoint, IWantCustomLogging\r\n{\r\n    public void Init()\r\n    {\r\n        // setup your logging infrastructure then call\r\n        SetLoggingLibrary.Log4Net(null, new MyLogger());\r\n    }\r\n}",
                "Key": "customhostlogging",
                "Language": "cs",
                "File": "\\Snippets_4\\Host\\CustomLogging.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 40,
                "Value": "public class HostIdFixer : IWantToRunWhenBusStartsAndStops\r\n{\r\n    UnicastBus bus;\r\n\r\n    public HostIdFixer(UnicastBus bus)\r\n    {\r\n        this.bus = bus;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        var hostId = CreateGuid(Environment.MachineName, Configure.EndpointName);\r\n        var identifier = Assembly.GetExecutingAssembly().Location;\r\n        bus.HostInformation = new HostInformation(hostId, Environment.MachineName, identifier);\r\n    }\r\n\r\n    static Guid CreateGuid(params string[] data)\r\n    {\r\n        using (var provider = new MD5CryptoServiceProvider())\r\n        {\r\n            var inputBytes = Encoding.Default.GetBytes(String.Concat(data));\r\n            var hashBytes = provider.ComputeHash(inputBytes);\r\n            return new Guid(hashBytes);\r\n        }\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n    }\r\n}",
                "Key": "hostidfixer",
                "Language": "cs",
                "File": "\\Snippets_4\\HostIdentifier\\HostIdFixer.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 22,
                "Value": "var config = new LoggingConfiguration();\r\n\r\nvar target = new ColoredConsoleTarget();\r\nconfig.AddTarget(\"console\", target);\r\nconfig.LoggingRules.Add(new LoggingRule(\"MyNamespace.*\", LogLevel.Debug, target));\r\n\r\nLogManager.Configuration = config;\r\n\r\nSetLoggingLibrary.NLog();",
                "Key": "nlogfiltering",
                "Language": "cs",
                "File": "\\Snippets_4\\Logging\\NLog\\NLogFiltering.cs",
                "Version": null
            },
            {
                "StartRow": 6,
                "EndRow": 24,
                "Value": "class MessageFailedHandler : IHandleMessages<MessageFailed>\r\n{\r\n    public void Handle(MessageFailed message)\r\n    {\r\n        var failedMessageId = message.FailedMessageId;\r\n        var exceptionMessage = message.FailureDetails.Exception.Message;\r\n\r\n        var chatMessage = string.Format(\"Message with id: {0} failed with reason: '{1}'. Open in ServiceInsight: {2}\",\r\n            failedMessageId,\r\n            exceptionMessage,\r\n            GetServiceInsightUri(failedMessageId));\r\n\r\n        using (var client = new HipchatClient())\r\n        {\r\n            client.PostChatMessage(chatMessage);\r\n        }\r\n    }",
                "Key": "messagefailedhandler",
                "Language": "cs",
                "File": "\\Snippets_4\\Monitoring\\MessageFailedHandler.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 15,
                "Value": "Configure.Serialization.Json();\r\nConfigure.Instance\r\n    .DefiningEventsAs(t => typeof(IEvent).IsAssignableFrom(t) ||\r\n                           //include ServiceControl events\r\n                           t.Namespace != null && t.Namespace.StartsWith(\"ServiceControl.Contracts\"));",
                "Key": "servicecontroleventsconfig",
                "Language": "cs",
                "File": "\\Snippets_4\\Monitoring\\ServiceControlEventsConfig.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 14,
                "Value": "Configure.With()\r\n    .AzureSubscriptionStorage()\r\n    .AzureSagaPersister()\r\n    .UseAzureTimeoutPersister();",
                "Key": "persistancewithazure",
                "Language": "cs",
                "File": "\\Snippets_4\\Persistence\\Azure\\AzurePersistence.cs",
                "Version": {
                    "Major": 5,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 10,
                "EndRow": 20,
                "Value": "var transactionRecoveryPath = \"path to transaction recovery storage\";\r\n    \r\nConfigure.With()\r\n    .CustomiseRavenPersistence(store =>\r\n    {\r\n        var documentStore = ((DocumentStore) store);\r\n        documentStore.TransactionRecoveryStorage = new LocalDirectoryTransactionRecoveryStorage(transactionRecoveryPath);\r\n    });",
                "Key": "configuringtransactionrecoverystorage",
                "Language": "cs",
                "File": "\\Snippets_4\\Persistence\\RavenDB\\ConfiguringTransactionRecoveryStorage.cs",
                "Version": null
            },
            {
                "StartRow": 6,
                "EndRow": 15,
                "Value": "class NewStepInPipeline : PipelineOverride\r\n{\r\n    public override void Override(BehaviorList<HandlerInvocationContext> behaviorList)\r\n    {\r\n        behaviorList.InsertAfter<InvokeHandlersBehavior, SampleBehavior>();\r\n    }\r\n\r\n    //Classes inheriting from PipelineOverride are registered by convention. No need to explicitly register.\r\n}",
                "Key": "newstepinpipeline",
                "Language": "cs",
                "File": "\\Snippets_4\\PIpeline\\NewPipelineStep.cs",
                "Version": {
                    "Major": 4,
                    "Minor": 5,
                    "Patch": null
                }
            },
            {
                "StartRow": 7,
                "EndRow": 16,
                "Value": "class ReplaceExistingBehavior : PipelineOverride\r\n{\r\n    public override void Override(BehaviorList<HandlerInvocationContext> behaviorList)\r\n    {\r\n        behaviorList.Replace<InvokeHandlersBehavior, MyInvokeHandlersBehavior>();\r\n    }\r\n\r\n    //Classes inheriting from PipelineOverride are registered by convention. No need to explicitly register.\r\n}",
                "Key": "replacepipelinestep",
                "Language": "cs",
                "File": "\\Snippets_4\\PIpeline\\ReplacePipelineBehavior.cs",
                "Version": {
                    "Major": 4,
                    "Minor": 5,
                    "Patch": null
                }
            },
            {
                "StartRow": 6,
                "EndRow": 15,
                "Value": "public class SampleBehavior : IBehavior<HandlerInvocationContext>\r\n{\r\n    public void Invoke(HandlerInvocationContext context, Action next)\r\n    {\r\n        next();\r\n    }\r\n}",
                "Key": "samplepipelinebehavior",
                "Language": "cs",
                "File": "\\Snippets_4\\PIpeline\\SampleBehavior.cs",
                "Version": {
                    "Major": 4,
                    "Minor": 5,
                    "Patch": null
                }
            },
            {
                "StartRow": 11,
                "EndRow": 21,
                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                "Key": "saga-without-started-by",
                "Language": "cs",
                "File": "\\Snippets_4\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 83,
                "EndRow": 92,
                "Value": "Feature.Enable<Sagas>();\r\nConfigure.Serialization.Xml();\r\nvar bus = NServiceBus.Configure.With()\r\n                        .DefaultBuilder()\r\n                        .UseTransport<Msmq>()\r\n                        .UnicastBus()\r\n                        .RavenSagaPersister()\r\n                        .CreateBus();",
                "Key": "saga-configure-self-hosted",
                "Language": "cs",
                "File": "\\Snippets_4\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 112,
                "EndRow": 126,
                "Value": "public class MySagaData : IContainSagaData\r\n{\r\n    // the following properties are mandatory\r\n    public Guid Id { get; set; }\r\n    public string Originator { get; set; }\r\n    public string OriginalMessageId { get; set; }\r\n\r\n    // property used as correlation id\r\n    [Unique]\r\n    public string SomeID { get; set; }\r\n\r\n    // all other properties you want persisted\r\n    public string SomeData { get; set; }\r\n}",
                "Key": "saga-data",
                "Language": "cs",
                "File": "\\Snippets_4\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 18,
                "EndRow": 19,
                "Value": "Configure.With();",
                "Key": "scanningdefault",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 22,
                "EndRow": 23,
                "Value": "Configure.With(myListOfAssemblies);",
                "Key": "scanninglistofassemblies",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 26,
                "EndRow": 27,
                "Value": "Configure.With(assembly1, assembly2);",
                "Key": "scanningparamarrayofassemblies",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 30,
                "EndRow": 31,
                "Value": "Configure.With(@\"c:\\my-custom-dir\");",
                "Key": "scanningcustomdirectory",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 34,
                "EndRow": 35,
                "Value": "Configure.With(myTypes);",
                "Key": "scanninglistoftypes",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 38,
                "EndRow": 39,
                "Value": "Configure.With(AllAssemblies.Except(\"MyAssembly.dll\").And(\"MyAssembly.dll\"));",
                "Key": "scanningexcludebyname",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 42,
                "EndRow": 43,
                "Value": "Configure.With(AllAssemblies.Matching(\"MyCompany.\").And(\"SomethingElse\"));",
                "Key": "scanningincludebypattern",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 46,
                "EndRow": 47,
                "Value": "Configure.With(AllAssemblies.Matching(\"MyCompany.\").Except(\"BadAssembly.dll\"));",
                "Key": "scanningmixingincludeandexclude",
                "Language": "cs",
                "File": "\\Snippets_4\\Scanning\\ScanningPublicApi.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 12,
                "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>();",
                "Key": "rabbitmq-config-basic",
                "Language": "cs",
                "File": "\\Snippets_4\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 1,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 21,
                "EndRow": 24,
                "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>(() => \"My custom connection string\");",
                "Key": "rabbitmq-config-connectionstring-in-code",
                "Language": "cs",
                "File": "\\Snippets_4\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 1,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 31,
                "EndRow": 35,
                "Value": "Configure.With()\r\n    .UseTransport<NServiceBus.RabbitMQ>(\"MyConnectionStringName\");",
                "Key": "rabbitmq-config-connectionstringname",
                "Language": "cs",
                "File": "\\Snippets_4\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 1,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 9,
                "EndRow": 37,
                "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void RunWithDependencyInjection()\r\n    {\r\n        Test.Initialize();\r\n\r\n        var mockService = new MyService();\r\n        Test.Handler(bus => new WithDependencyInjectionHandler(mockService));\r\n        //Rest of test\r\n    }\r\n}\r\n\r\nclass WithDependencyInjectionHandler : IHandleMessages<MyMessage>\r\n{\r\n    MyService myService;\r\n\r\n    public WithDependencyInjectionHandler(MyService myService)\r\n    {\r\n        this.myService = myService;\r\n    }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n    }\r\n}",
                "Key": "testingadditionaldependencies",
                "Language": "cs",
                "File": "\\Snippets_4\\UnitTesting\\AdditionalServices.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 36,
                "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n\r\n        Test.Handler<MyMessageHandler>()\r\n            .SetIncomingHeader(\"Test\", \"abc\")\r\n            .ExpectReply<ResponseMessage>(m => Test.Bus.GetMessageHeader(m, \"MyHeaderKey\") == \"myHeaderValue\")\r\n            .OnMessage<RequestMessage>(m => m.String = \"hello\");\r\n    }\r\n}\r\n\r\nclass MyMessageHandler : IHandleMessages<RequestMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(RequestMessage message)\r\n    {\r\n        var responseMessage = new ResponseMessage();\r\n        Bus.SetMessageHeader(responseMessage, \"MyHeaderKey\", \"myHeaderValue\");\r\n        Bus.Reply(responseMessage);\r\n    }\r\n}",
                "Key": "testingheadermanipulation",
                "Language": "cs",
                "File": "\\Snippets_4\\UnitTesting\\HeaderManipulation.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 49,
                "Value": "public class MyTest\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n        Test.Saga<MySaga>()\r\n                .ExpectReplyToOriginator<MyResponse>() // In v4 the typo in Originator was fixed.\r\n                .ExpectTimeoutToBeSetIn<StartsSaga>((state, span) => span == TimeSpan.FromDays(7))\r\n                .ExpectPublish<MyEvent>()\r\n                .ExpectSend<MyCommand>()\r\n            .When(s => s.Handle(new StartsSaga()))\r\n                .ExpectPublish<MyEvent>()\r\n            .WhenSagaTimesOut()\r\n                .AssertSagaCompletionIs(true);\r\n    }\r\n}\r\n\r\npublic class MySaga : NServiceBus.Saga.Saga<MySagaData>,\r\n    IAmStartedByMessages<StartsSaga>,\r\n    IHandleTimeouts<StartsSaga>\r\n{\r\n    public void Handle(StartsSaga message)\r\n    {\r\n        ReplyToOriginator(new MyResponse());\r\n        Bus.Publish(new MyEvent());\r\n        Bus.Send(new MyCommand());\r\n        RequestTimeout(TimeSpan.FromDays(7), message); \r\n    }\r\n\r\n    public void Timeout(StartsSaga state)\r\n    {\r\n        Bus.Publish<MyEvent>();\r\n        MarkAsComplete();\r\n    }\r\n}",
                "Key": "testingsaga",
                "Language": "cs",
                "File": "\\Snippets_4\\UnitTesting\\Saga.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 38,
                "Value": "public class TestHandler\r\n{\r\n    [Test]\r\n    public void Run()\r\n    {\r\n        Test.Initialize();\r\n\r\n        Test.Handler<MyHandler>()\r\n            .ExpectReply<ResponseMessage>(m => m.String == \"hello\")\r\n            .OnMessage<RequestMessage>(m => m.String = \"hello\");\r\n    }\r\n}\r\n\r\npublic class MyHandler :\r\n    IHandleMessages<RequestMessage>\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(RequestMessage message)\r\n    {\r\n        var reply = new ResponseMessage\r\n        {\r\n            String = message.String\r\n        };\r\n        Bus.Reply(reply);\r\n    }\r\n}",
                "Key": "testingservicelayer",
                "Language": "cs",
                "File": "\\Snippets_4\\UnitTesting\\ServiceLayer.cs",
                "Version": null
            },
            {
                "StartRow": 6,
                "EndRow": 30,
                "Value": "public class CancelOrderService : WcfService<CancelOrder, ErrorCodes>\r\n{\r\n}\r\n\r\npublic class CancelOrderHandler : IHandleMessages<CancelOrder>\r\n{\r\n    public void Handle(CancelOrder message)\r\n    {\r\n        // Write code here\r\n    }\r\n}\r\n\r\npublic enum ErrorCodes\r\n{\r\n    Success,\r\n    Fail\r\n}\r\n\r\npublic class CancelOrder : ICommand\r\n{\r\n    public int OrderId { get; set; }\r\n}",
                "Key": "exposewcfservice",
                "Language": "cs",
                "File": "\\Snippets_4\\WCF\\Expose_wcf.cs",
                "Version": null
            },
            {
                "StartRow": 21,
                "EndRow": 29,
                "Value": "//This type would be derived from some other runtime information\r\nvar messageType = typeof(MyInterfaceMessage);\r\n\r\nvar instance = messageCreator.CreateInstance(messageType);\r\n\r\n//use reflection to set properties on the constructed instance\r\n\r\nBus.Publish(instance);",
                "Key": "reflectioninterfacemessagecreation",
                "Language": "cs",
                "File": "\\Snippets_5\\InterfaceMessageCreation.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 11,
                "Value": "var configuration = new BusConfiguration();",
                "Key": "minimumconfiguration",
                "Language": "cs",
                "File": "\\Snippets_5\\MinimumConfiguration.cs",
                "Version": null
            },
            {
                "StartRow": 14,
                "EndRow": 20,
                "Value": "using (var bus = Bus.Create(configuration))\r\n{\r\n    bus.Start();\r\n}",
                "Key": "busdotcreate",
                "Language": "cs",
                "File": "\\Snippets_5\\MinimumConfiguration.cs",
                "Version": null
            },
            {
                "StartRow": 14,
                "EndRow": 15,
                "Value": "configuration.UseSerialization(typeof(MyCustomSerializer));",
                "Key": "registercustomserializer",
                "Language": "cs",
                "File": "\\Snippets_5\\RegisterCustomSerializer.cs",
                "Version": null
            },
            {
                "StartRow": 19,
                "EndRow": 38,
                "Value": "class MyCustomSerializer : IMessageSerializer\r\n{\r\n    public void Serialize(object message, Stream stream)\r\n    {\r\n        // Add code to serialize message\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public object[] Deserialize(Stream stream, IList<Type> messageTypes = null)\r\n    {\r\n        // Add code to deserialize message\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public string ContentType\r\n    {\r\n        get { throw new NotImplementedException(); }\r\n    }\r\n}",
                "Key": "customserializer",
                "Language": "cs",
                "File": "\\Snippets_5\\RegisterCustomSerializer.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 16,
                "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.ScaleOut().UseSingleBrokerQueue();\r\n//or\r\nconfiguration.ScaleOut().UseUniqueBrokerQueuePerMachine();",
                "Key": "scaleout",
                "Language": "cs",
                "File": "\\Snippets_5\\ScaleOut.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 15,
                "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages(TimeSpan.FromMinutes(5));",
                "Key": "timetowaitbeforetriggeringcriticalerrorontimeoutoutages",
                "Language": "cs",
                "File": "\\Snippets_5\\TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 66,
                "Value": "public class SubscribeToErrorsNotifications : IWantToRunWhenBusStartsAndStops\r\n{\r\n    BusNotifications busNotifications;\r\n\r\n    public SubscribeToErrorsNotifications(BusNotifications busNotifications)\r\n    {\r\n        this.busNotifications = busNotifications;\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n        unsubscribeStreams.Add(\r\n            busNotifications.Errors.MessageSentToErrorQueue\r\n                // It is very important to handle streams on another thread\r\n                // otherwise the system performance can be impacted\r\n                .SubscribeOn(System.Reactive.Concurrency.Scheduler.Default) // Uses a pool-based scheduler\r\n                .Subscribe(SendEmailOnFailure)\r\n            );\r\n\r\n\r\n        // You can also subscribe when messages fail FLR and/or SLR\r\n        // - busNotifications.Errors.MessageHasFailedAFirstLevelRetryAttempt\r\n        // - busNotifications.Errors.MessageHasBeenSentToSecondLevelRetries\r\n    }\r\n\r\n    public void Stop()\r\n    {\r\n        foreach (var unsubscribeStream in unsubscribeStreams)\r\n        {\r\n            unsubscribeStream.Dispose();\r\n        }\r\n    }\r\n\r\n    void SendEmailOnFailure(FailedMessage failedMessage)\r\n    {\r\n        using (var c = new SmtpClient())\r\n        {\r\n\r\n            using (var mailMessage = new MailMessage(\"from@mail.com\",\r\n                \"to@mail.com\", \"Message sent to error queue\",\r\n                failedMessage.Exception.ToString()))\r\n            {\r\n                try\r\n                {\r\n                    c.Send(mailMessage);\r\n                }\r\n                catch (SmtpFailedRecipientsException)\r\n                {\r\n                    // Failed to send an email to some of its recipients\r\n                    // Probably you should log this as a warning!\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    List<IDisposable> unsubscribeStreams = new List<IDisposable>();\r\n}",
                "Key": "subscribetoerrorsnotifications",
                "Language": "cs",
                "File": "\\Snippets_5\\BusNotifications\\Errors.cs",
                "Version": null
            },
            {
                "StartRow": 47,
                "EndRow": 58,
                "Value": "configuration.UseDataBus<AzureDataBus>()\r\n    .ConnectionString(azureStorageConnectionString)\r\n    .Container(containerName)\r\n    .BasePath(basePathWithinContainer)\r\n    .BlockSize(blockSize)\r\n    .DefaultTTL(timeToLiveInSeconds)\r\n    .MaxRetries(maxNumberOfRetryAttempts)\r\n    .NumberOfIOThreads(numberOfIoThreads)\r\n    .BackOffInterval(backOffIntervalBetweenRetriesInSecs);",
                "Key": "azuredatabusconfiguration",
                "Language": "cs",
                "File": "\\Snippets_5\\DataBus\\DataBus.cs",
                "Version": null
            },
            {
                "StartRow": 104,
                "EndRow": 126,
                "Value": "class CustomDataBus : IDataBus\r\n{\r\n    public Stream Get( string key )\r\n    {\r\n        return File.OpenRead( \"blob.dat\" );\r\n    }\r\n\r\n    public string Put( Stream stream, TimeSpan timeToBeReceived )\r\n    {\r\n        using( var destination = File.OpenWrite( \"blob.dat\" ) )\r\n        {\r\n            stream.CopyTo( destination );\r\n        }\r\n        return \"the-key-of-the-stored-file-such-as-the-full-path\";\r\n    }\r\n\r\n    public void Start()\r\n    {\r\n    }\r\n}",
                "Key": "customdatabus",
                "Language": "cs",
                "File": "\\Snippets_5\\DataBus\\DataBus.cs",
                "Version": null
            },
            {
                "StartRow": 133,
                "EndRow": 137,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseDataBus(typeof(CustomDataBus));",
                "Key": "plugincustomdatabusv5",
                "Language": "cs",
                "File": "\\Snippets_5\\DataBus\\DataBus.cs",
                "Version": {
                    "Major": 5,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 11,
                "EndRow": 15,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.RegisterComponents(c => c.ConfigureComponent<MessageEncryptor>(DependencyLifecycle.InstancePerCall));",
                "Key": "usingmessagebodyencryptor",
                "Language": "cs",
                "File": "\\Snippets_5\\Encryption\\MessageBodyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 20,
                "EndRow": 33,
                "Value": "public class MessageEncryptor : IMutateTransportMessages\r\n{\r\n    public void MutateIncoming(TransportMessage transportMessage)\r\n    {\r\n        transportMessage.Body = transportMessage.Body.Reverse().ToArray();\r\n    }\r\n\r\n    public void MutateOutgoing(LogicalMessage logicalMessage, TransportMessage transportMessage)\r\n    {\r\n        transportMessage.Body = transportMessage.Body.Reverse().ToArray();\r\n    }\r\n}",
                "Key": "messagebodyencryptor",
                "Language": "cs",
                "File": "\\Snippets_5\\Encryption\\MessageBodyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 43,
                "EndRow": 53,
                "Value": "var configuration = new BusConfiguration();\r\nvar encryptionKey = \"gdDbqRpqdRbTs3mhdZh9qCaDaxJXl+e6\";\r\nvar expiredKeys = new List<string>\r\n                  {\r\n                      \"abDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\",\r\n                      \"cdDbqRpQdRbTs3mhdZh9qCaDaxJXl+e6\"\r\n                  };\r\nconfiguration.RijndaelEncryptionService(encryptionKey, expiredKeys);",
                "Key": "encryptionfromfluentapi",
                "Language": "cs",
                "File": "\\Snippets_5\\Encryption\\PropertyEncryption.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 22,
                "Value": "public class SampleIncomingBehavior :\r\n    IBehavior<IncomingContext>\r\n{\r\n    public void Invoke(IncomingContext context, Action next)\r\n    {\r\n        var headers = context.PhysicalMessage.Headers;\r\n        var nsbVersion = headers[Headers.NServiceBusVersion];\r\n        var customHeader = headers[\"MyCustomHeader\"];\r\n        next();\r\n    }\r\n}",
                "Key": "header-incoming-behaviour",
                "Language": "cs",
                "File": "\\Snippets_5\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 24,
                "EndRow": 33,
                "Value": "public class SampleOutgoingBehavior : IBehavior<OutgoingContext>\r\n{\r\n    public void Invoke(OutgoingContext context, Action next)\r\n    {\r\n        var headers = context.OutgoingMessage.Headers;\r\n        headers[\"MyCustomHeader\"] = \"My custom value\";\r\n        next();\r\n    }\r\n}",
                "Key": "header-outgoing-behavior",
                "Language": "cs",
                "File": "\\Snippets_5\\Headers\\HeaderUsage.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 18,
                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.PurgeOnStartup(true);\r\nconfig.Transactions().Disable();\r\nconfig.DisableFeature<SecondLevelRetries>();\r\nconfig.DisableFeature<StorageDrivenPublishing>();\r\nconfig.DisableFeature<TimeoutManager>();",
                "Key": "asaclientequivalent",
                "Language": "cs",
                "File": "\\Snippets_5\\Host\\AsAClientEquivalent.cs",
                "Version": null
            },
            {
                "StartRow": 3,
                "EndRow": 13,
                "Value": "using NServiceBus;\r\nclass CustomizingHost : IConfigureThisEndpoint\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        // To customize, use the configuration parameter. \r\n        // For example, to customize the endpoint name:\r\n        configuration.EndpointName(\"NewEndpointName\");\r\n    }\r\n}",
                "Key": "customize_nsb_host",
                "Language": "cs",
                "File": "\\Snippets_5\\Host\\CustomizingHost.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 18,
                "Value": "var config = new BusConfiguration();\r\nconfig.UniquelyIdentifyRunningInstance()\r\n        .UsingNames(\"endpointName\", Environment.MachineName);\r\n// or\r\nvar hostId = CreateMyUniqueIdThatIsTheSameAcrossRestarts();\r\nconfig.UniquelyIdentifyRunningInstance()\r\n    .UsingCustomIdentifier(hostId);",
                "Key": "hostidfixer",
                "Language": "cs",
                "File": "\\Snippets_5\\HostIdentifier\\HostIdFixer_5_1.cs",
                "Version": {
                    "Major": 5,
                    "Minor": 1,
                    "Patch": null
                }
            },
            {
                "StartRow": 10,
                "EndRow": 15,
                "Value": "var defaultFactory = LogManager.Use<DefaultFactory>();\r\ndefaultFactory.Directory(\"pathToLoggingDirectory\");\r\ndefaultFactory.Level(LogLevel.Debug);",
                "Key": "overrideloggingdefaultsincode",
                "Language": "cs",
                "File": "\\Snippets_5\\Logging\\BuiltInConfig.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 15,
                "Value": "LogManager.Adapter = new ConsoleOutLoggerFactoryAdapter();\r\n\r\nNServiceBus.Logging.LogManager.Use<CommonLoggingFactory>();",
                "Key": "commonloggingincode",
                "Language": "cs",
                "File": "\\Snippets_5\\Logging\\CommonLogging\\CommonLoggingConfig.cs",
                "Version": null
            },
            {
                "StartRow": 13,
                "EndRow": 44,
                "Value": "var layout = new PatternLayout\r\n{\r\n    ConversionPattern = \"%d [%t] %-5p %c [%x] - %m%n\"\r\n};\r\nlayout.ActivateOptions();\r\nvar consoleAppender = new ColoredConsoleAppender\r\n{\r\n    Threshold = Level.Debug,\r\n    Layout = layout\r\n};\r\nconsoleAppender.ActivateOptions();\r\nvar fileAppender = new RollingFileAppender\r\n{\r\n    DatePattern = \"yyyy-MM-dd'.txt'\",\r\n    RollingStyle = RollingFileAppender.RollingMode.Composite,\r\n    MaxFileSize = 10 * 1024 * 1024,\r\n    MaxSizeRollBackups = 10,\r\n    LockingModel = new FileAppender.MinimalLock(),\r\n    StaticLogFileName = false,\r\n    File = @\"nsb_log_\",\r\n    Layout = layout,\r\n    AppendToFile = true,\r\n    Threshold = Level.Debug,\r\n};\r\nfileAppender.ActivateOptions();\r\n\r\nBasicConfigurator.Configure(fileAppender, consoleAppender);\r\n\r\nLogManager.Use<Log4NetFactory>();",
                "Key": "log4netincode",
                "Language": "cs",
                "File": "\\Snippets_5\\Logging\\Log4Net\\Log4NetConfig.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 25,
                "Value": "var config = new LoggingConfiguration();\r\n\r\nvar consoleTarget = new ColoredConsoleTarget\r\n{\r\n    Layout = \"${level}|${logger}|${message}${onexception:${newline}${exception:format=tostring}}\"\r\n};\r\nconfig.AddTarget(\"console\", consoleTarget);\r\nconfig.LoggingRules.Add(new LoggingRule(\"*\", LogLevel.Debug, consoleTarget));\r\n\r\nLogManager.Configuration = config;\r\n\r\nNServiceBus.Logging.LogManager.Use<NLogFactory>();",
                "Key": "nlogincode",
                "Language": "cs",
                "File": "\\Snippets_5\\Logging\\NLog\\NLogConfig.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 17,
                "Value": "configuration.UseSerialization<JsonSerializer>();\r\nconfiguration.Conventions()\r\n    .DefiningEventsAs(t => typeof(IEvent).IsAssignableFrom(t) ||\r\n                           //include ServiceControl events\r\n                           t.Namespace != null && t.Namespace.StartsWith(\"ServiceControl.Contracts\"));",
                "Key": "servicecontroleventsconfig",
                "Language": "cs",
                "File": "\\Snippets_5\\Monitoring\\ServiceControlEventsConfig.cs",
                "Version": {
                    "Major": 5,
                    "Minor": 0,
                    "Patch": null
                }
            },
            {
                "StartRow": 8,
                "EndRow": 13,
                "Value": "var configuration = new BusConfiguration();\r\n\r\nconfiguration.EnableOutbox();",
                "Key": "outboxenablineinfluent",
                "Language": "cs",
                "File": "\\Snippets_5\\Outbox\\OutboxEnableInFluent.cs",
                "Version": null
            },
            {
                "StartRow": 5,
                "EndRow": 22,
                "Value": "class OrderPlacedHandler : IHandleMessages<OrderPlaced>\r\n{\r\n    NHibernateStorageContext nHibernateStorageContext;\r\n\r\n    public OrderPlacedHandler(NHibernateStorageContext nHibernateStorageContext)\r\n    {\r\n        this.nHibernateStorageContext = nHibernateStorageContext;\r\n    }\r\n\r\n    public void Handle(OrderPlaced message)\r\n    {\r\n        var order = nHibernateStorageContext.Session.Get<OrderEntity>(message.OrderId);\r\n        order.Shipped = true;\r\n        nHibernateStorageContext.Session.Update(order);\r\n    }\r\n}",
                "Key": "outboxnhibernateaccesssession",
                "Language": "cs",
                "File": "\\Snippets_5\\Outbox\\NHibernate\\AccessSession.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 17,
                "Value": "var hibernateConfiguration = BuildMyBusinessDataNHibernateConfiguration();\r\n\r\nconfiguration.UsePersistence<NHibernatePersistence>()\r\n    .UseConfiguration(hibernateConfiguration);",
                "Key": "outboxsharenhibernateconfiguration",
                "Language": "cs",
                "File": "\\Snippets_5\\Outbox\\NHibernate\\ShareConfiguration.cs",
                "Version": null
            },
            {
                "StartRow": 9,
                "EndRow": 18,
                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<RavenDBPersistence>();\r\n    \r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);",
                "Key": "persistenceorder_correct",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\PersistenceOrder.cs",
                "Version": null
            },
            {
                "StartRow": 24,
                "EndRow": 34,
                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);\r\n\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .For(Storage.Sagas, Storage.Subscriptions, Storage.Timeouts);",
                "Key": "persistenceorder_explicit",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\PersistenceOrder.cs",
                "Version": null
            },
            {
                "StartRow": 40,
                "EndRow": 50,
                "Value": "var config = new BusConfiguration();\r\n\r\nconfig.UsePersistence<NHibernatePersistence>()\r\n    .For(Storage.Outbox);\r\n\r\nconfig.UsePersistence<InMemoryPersistence>()\r\n    .For(Storage.GatewayDeduplication);\r\n\r\n// This one will override the above settings!\r\nconfig.UsePersistence<RavenDBPersistence>();",
                "Key": "persistenceorder_incorrect",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\PersistenceOrder.cs",
                "Version": null
            },
            {
                "StartRow": 8,
                "EndRow": 12,
                "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<AzureStoragePersistence>();",
                "Key": "persistancewithazure",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\Azure\\AzurePersistence.cs",
                "Version": {
                    "Major": 6,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 16,
                "EndRow": 25,
                "Value": "public class EndpointConfig : IConfigureThisEndpoint\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        configuration.UsePersistence<AzureStoragePersistence>();\r\n    }\r\n}",
                "Key": "persistencewithazurehost",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\Azure\\AzurePersistence.cs",
                "Version": {
                    "Major": 6,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 14,
                "EndRow": 19,
                "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .AllowStaleSagaReads();",
                "Key": "ravendb-persistence-stale-sagas",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                "Version": null
            },
            {
                "StartRow": 25,
                "EndRow": 37,
                "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>().UseSharedSession(() =>\r\n{\r\n    var session = myDocumentStore.OpenSession();\r\n    // customize the session properties here\r\n    return session;\r\n});",
                "Key": "ravendb-persistence-shared-session-for-sagas",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                "Version": null
            },
            {
                "StartRow": 49,
                "EndRow": 62,
                "Value": "public class MyMessageHandler : IHandleMessages<MyMessage>\r\n{\r\n    public ISessionProvider SessionProvider { get; set; }\r\n\r\n    public void Handle(MyMessage message)\r\n    {\r\n        var doc = new MyDocument();\r\n\r\n        SessionProvider.Session.Store(doc);\r\n    }\r\n}",
                "Key": "ravendb-persistence-shared-session-for-sagas-handler",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                "Version": null
            },
            {
                "StartRow": 67,
                "EndRow": 77,
                "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .UseDocumentStoreForSubscriptions(myDocumentStore)\r\n    .UseDocumentStoreForSagas(myDocumentStore)\r\n    .UseDocumentStoreForTimeouts(myDocumentStore);",
                "Key": "ravendb-persistence-specific-external-store",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                "Version": null
            },
            {
                "StartRow": 88,
                "EndRow": 97,
                "Value": "var myDocumentStore = new DocumentStore();\r\n// configure document store properties here\r\n\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(myDocumentStore);",
                "Key": "ravendb-persistence-external-store",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                "Version": null
            },
            {
                "StartRow": 103,
                "EndRow": 111,
                "Value": "var connectionParams = new ConnectionParameters();\r\n// configure connection params (ApiKey, DatabaseName, Url) here\r\n\r\nvar config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(connectionParams);",
                "Key": "ravendb-persistence-external-connection-params",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                "Version": null
            },
            {
                "StartRow": 124,
                "EndRow": 128,
                "Value": "var config = new BusConfiguration();\r\nconfig.UsePersistence<RavenDBPersistence>();",
                "Key": "ravendb-persistence-default",
                "Language": "cs",
                "File": "\\Snippets_5\\Persistence\\RavenDB\\Configure.cs",
                "Version": null
            },
            {
                "StartRow": 5,
                "EndRow": 24,
                "Value": "class NewStepInPipeline : RegisterStep\r\n{\r\n    public NewStepInPipeline()\r\n        : base(\"NewStepInPipeline\", typeof(SampleBehavior), \"Logs a warning when processing takes too long\")\r\n    {\r\n        // Optional: Specify where it needs to be invoked in the pipeline, for example InsertBefore or InsertAfter\r\n        InsertBefore(WellKnownStep.InvokeHandlers);\r\n    }\r\n}\r\n\r\nclass NewStepInPipelineRegistration : INeedInitialization\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        // Register the new step in the pipeline\r\n        configuration.Pipeline.Register<NewStepInPipeline>();\r\n    }\r\n}",
                "Key": "newstepinpipeline",
                "Language": "cs",
                "File": "\\Snippets_5\\Pipeline\\NewPipelineStep.cs",
                "Version": null
            },
            {
                "StartRow": 4,
                "EndRow": 11,
                "Value": "public class ReplaceExistingBehavior : INeedInitialization\r\n{\r\n    public void Customize(BusConfiguration configuration)\r\n    {\r\n        configuration.Pipeline.Replace(\"Id of the step to replace\", typeof(SampleBehavior), \"Description\");\r\n    }\r\n}",
                "Key": "replacepipelinestep",
                "Language": "cs",
                "File": "\\Snippets_5\\Pipeline\\ReplacePipelineBehavior.cs",
                "Version": null
            },
            {
                "StartRow": 6,
                "EndRow": 15,
                "Value": "public class SampleBehavior : IBehavior<IncomingContext>\r\n{\r\n    public void Invoke(IncomingContext context, Action next)\r\n    {\r\n        next();\r\n    }\r\n}",
                "Key": "samplepipelinebehavior",
                "Language": "cs",
                "File": "\\Snippets_5\\Pipeline\\SampleBehavior.cs",
                "Version": null
            },
            {
                "StartRow": 11,
                "EndRow": 23,
                "Value": "const string id = \"d5723e19-92ad-4531-adad-8611e6e05c8a\";\r\nvar store = new DocumentStore\r\n            {\r\n                ResourceManagerId = new Guid(id)\r\n            };\r\nstore.Initialize();\r\n\r\nvar configuration = new BusConfiguration();\r\nconfiguration.UsePersistence<RavenDBPersistence>()\r\n    .SetDefaultDocumentStore(store);",
                "Key": "changeresourcemanagerid",
                "Language": "cs",
                "File": "\\Snippets_5\\RavenDB\\ChangeResourceManagerID.cs",
                "Version": null
            },
            {
                "StartRow": 35,
                "EndRow": 55,
                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        // code to handle Message1\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        // code to handle Message2\r\n    }\r\n}",
                "Key": "saga-without-mapping",
                "Language": "cs",
                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 93,
                "EndRow": 100,
                "Value": "protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n{\r\n    mapper.ConfigureMapping<Message3>(m => m.Part1 + \"_\" + m.Part2)\r\n            .ToSaga(m => m.SomeID);\r\n}",
                "Key": "saga-find-by-expression",
                "Language": "cs",
                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 145,
                "EndRow": 167,
                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<Message2>(s => s.SomeID)\r\n                .ToSaga(m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        ReplyToOriginator(new AlmostDoneMessage { SomeID = Data.SomeID });\r\n    }\r\n}",
                "Key": "saga-with-reply",
                "Language": "cs",
                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 173,
                "EndRow": 209,
                "Value": "public class MySaga : Saga<MySagaData>,\r\n                        IAmStartedByMessages<Message1>,\r\n                        IHandleMessages<Message2>,\r\n                        IHandleTimeouts<MyCustomTimeout>\r\n{\r\n    protected override void ConfigureHowToFindSaga(SagaPropertyMapper<MySagaData> mapper)\r\n    {\r\n        mapper.ConfigureMapping<Message2>(s => s.SomeID)\r\n                .ToSaga(m => m.SomeID);\r\n    }\r\n\r\n    public void Handle(Message1 message)\r\n    {\r\n        Data.SomeID = message.SomeID;\r\n        RequestTimeout<MyCustomTimeout>(TimeSpan.FromHours(1));\r\n    }\r\n\r\n    public void Handle(Message2 message)\r\n    {\r\n        Data.Message2Arrived = true;\r\n        ReplyToOriginator(new AlmostDoneMessage\r\n            {\r\n                SomeID = Data.SomeID\r\n            });\r\n    }\r\n\r\n    public void Timeout(MyCustomTimeout state)\r\n    {\r\n        if (!Data.Message2Arrived)\r\n        {\r\n            ReplyToOriginator(new TiredOfWaitingForMessage2());\r\n        }\r\n    }\r\n}",
                "Key": "saga-with-timeout",
                "Language": "cs",
                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 233,
                "EndRow": 244,
                "Value": "public void Handle(Message2 message)\r\n{\r\n    Data.Message2Arrived = true;\r\n    ReplyToOriginator(new AlmostDoneMessage\r\n    {\r\n        SomeID = Data.SomeID\r\n    });\r\n    MarkAsComplete();\r\n}",
                "Key": "saga-with-complete",
                "Language": "cs",
                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 258,
                "EndRow": 269,
                "Value": "public class SagaNotFoundHandler : IHandleSagaNotFound\r\n{\r\n    public IBus Bus { get; set; }\r\n\r\n    public void Handle(object message)\r\n    {\r\n        Bus.Reply(new SagaDisappearedMessage());\r\n    }\r\n}",
                "Key": "saga-not-found",
                "Language": "cs",
                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 274,
                "EndRow": 302,
                "Value": "// NHibernate example:\r\npublic class MyNHibernateSagaFinder : IFindSagas<MySagaData>.Using<Message2>\r\n{\r\n    public NHibernateStorageContext StorageContext { get; set; }\r\n\r\n    public MySagaData FindBy(Message2 message)\r\n    {\r\n        //your custom finding logic here, e.g.\r\n        return StorageContext.Session.QueryOver<MySagaData>()\r\n                                .Where(x => x.SomeID == message.SomeID && x.SomeData == message.SomeData)\r\n                                .SingleOrDefault();\r\n    }\r\n}\r\n\r\n// RavenDb example:\r\npublic class MyRavenDbSagaFinder : IFindSagas<MySagaData>.Using<Message2>\r\n{\r\n    public ISessionProvider SessionProvider { get; set; }\r\n\r\n    public MySagaData FindBy(Message2 message)\r\n    {\r\n        //your custom finding logic here, e.g.\r\n        return SessionProvider.Session\r\n                                .Query<MySagaData>()\r\n                                .SingleOrDefault(x => x.SomeID == message.SomeID && x.SomeData == message.SomeData);\r\n    }\r\n}",
                "Key": "saga-finder",
                "Language": "cs",
                "File": "\\Snippets_5\\Sagas\\SagaBasics.cs",
                "Version": null
            },
            {
                "StartRow": 10,
                "EndRow": 14,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>();",
                "Key": "rabbitmq-config-basic",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 20,
                "EndRow": 25,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .ConnectionString(\"My custom connection string\");",
                "Key": "rabbitmq-config-connectionstring-in-code",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 31,
                "EndRow": 36,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .ConnectionStringName(\"MyConnectionStringName\");",
                "Key": "rabbitmq-config-connectionstringname",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 43,
                "EndRow": 48,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .DisableCallbackReceiver();",
                "Key": "rabbitmq-config-disablecallbackreceiver",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 55,
                "EndRow": 60,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .CallbackReceiverMaxConcurrency(10);",
                "Key": "rabbitmq-config-callbackreceiver-thread-count",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 66,
                "EndRow": 71,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<RabbitMQTransport>()\r\n    .UseConnectionManager<MyConnectionManager>();",
                "Key": "rabbitmq-config-useconnectionmanager",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\RabbitMQ\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 8,
                "EndRow": 12,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();",
                "Key": "sqlserver-config-transactionscope",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 18,
                "EndRow": 24,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();\r\nconfiguration.Transactions()\r\n    .DisableDistributedTransactions();",
                "Key": "sqlserver-config-native-transactions",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 30,
                "EndRow": 35,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>();\r\nconfiguration.Transactions().Disable();",
                "Key": "sqlserver-config-no-transactions",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 41,
                "EndRow": 46,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>()\r\n    .DisableCallbackReceiver();",
                "Key": "sqlserver-config-disable-secondaries",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 53,
                "EndRow": 58,
                "Value": "var configuration = new BusConfiguration();\r\nconfiguration.UseTransport<SqlServerTransport>()\r\n    .CallbackReceiverMaxConcurrency(16);",
                "Key": "sqlserver-config-set-secondary-concurrency",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 64,
                "EndRow": 70,
                "Value": "var configuration = new BusConfiguration();\r\nvar bus = Bus.Create(configuration);\r\nvar callback = bus.Send(new Request());\r\ncallback.Register(ProcessResponse);",
                "Key": "sqlserver-config-callbacks",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            },
            {
                "StartRow": 73,
                "EndRow": 76,
                "Value": "bus.Return(42);",
                "Key": "sqlserver-config-callbacks-reply",
                "Language": "cs",
                "File": "\\Snippets_5\\Transports\\SqlServer\\ConfigurationSettings.cs",
                "Version": {
                    "Major": 2,
                    "Minor": null,
                    "Patch": null
                }
            }
        ],
        "Errors": [
            "Duplicate key detected. File:`\\Snippets_4\\EndpointName.cs`. Line:8. Key:`endpointnamefluent`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\EndpointName.cs`. Line:17. Key:`endpointnamebyattribute`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\EndpointName.cs`. Line:25. Key:`endpointnamebynamespace`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\HandlerOrdering.cs`. Line:8. Key:`handlerorderingwithfluent`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\HandlerOrdering.cs`. Line:17. Key:`handlerorderingwithfirst`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\HandlerOrdering.cs`. Line:27. Key:`handlerorderingwithmultiple`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\InstancePerUnitOfWorkRegistration.cs`. Line:9. Key:`instanceperunitofworkregistration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\SendOnly.cs`. Line:10. Key:`sendonly`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Callback\\Callback.cs`. Line:24. Key:`callbacktoaccessmessageregistration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Callback\\Callback.cs`. Line:49. Key:`triggercallback`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Conventions\\ExpressMessages.cs`. Line:8. Key:`expressmessageconvention`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Conventions\\ExpressMessages.cs`. Line:16. Key:`expressmessageattribute`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Conventions\\MessageConventions.cs`. Line:9. Key:`messageconventions`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Distributor\\ConfiguringDistributor.cs`. Line:8. Key:`configuringdistributor`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Distributor\\ConfiguringWorker.cs`. Line:8. Key:`configuringworker`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:12. Key:`encryptionservicesimple`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:20. Key:`definingencryptedpropertiesas`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:26. Key:`messageforencryptionconvention`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:32. Key:`messagewithencryptedproperty`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:39. Key:`encryptionfromiprovideconfiguration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Encryption\\PropertyEncryption.cs`. Line:67. Key:`encryptionfromiencryptionservice`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Gateway\\GatewayConfig.cs`. Line:8. Key:`gatewayconfiguration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Gateway\\GatewayConfig.cs`. Line:16. Key:`sendtosites`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Logging\\MessageToLog.cs`. Line:5. Key:`messagewithtostringlogged`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Logging\\OverrideViaProfile.cs`. Line:6. Key:`loggingconfigwithprofile`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Logging\\UsingLogging.cs`. Line:2. Key:`usinglogging`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Logging\\Log4Net\\Log4NetFiltering.cs`. Line:13. Key:`log4netfiltering`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Persistence\\NHibernate\\ConfiguringNHibernate.cs`. Line:8. Key:`configuringnhibernate`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Sagas\\SagaBasics.cs`. Line:27. Key:`saga-with-started-by`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Sagas\\SagaBasics.cs`. Line:55. Key:`saga-with-started-by-and-correlation-id-set`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\Scheduling\\Scheduling.cs`. Line:10. Key:`scheduletask`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:10. Key:`secondlevelretriesdisable`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:16. Key:`secondlevelretriescustompolicy`. Version:``",
            "Duplicate key detected. File:`\\Snippets_4\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:23. Key:`secondlevelretriescustompolicyhandler`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\BusExtensionMethodForHandlerReplacement.cs`. Line:6. Key:`busextensionmethodforhandler`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\ContainerCustom.cs`. Line:11. Key:`customcontainers`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Containers.cs`. Line:20. Key:`containers`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\CriticalError.cs`. Line:10. Key:`definecriticalerroraction`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\CriticalError.cs`. Line:25. Key:`raisecriticalerror`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\CustomConfigOverrides.cs`. Line:8. Key:`customconfigoverrides`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\CustomConfigSource.cs`. Line:12. Key:`registercustomconfigsource`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\CustomConfigSource.cs`. Line:23. Key:`customconfigsource`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\CustomConfigSource.cs`. Line:44. Key:`customconfigprovider`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\CustomRavenConfig.cs`. Line:11. Key:`customravenconfig`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DiscardingOldMessages.cs`. Line:8. Key:`discardingoldmessageswithanattribute`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DiscardingOldMessages.cs`. Line:15. Key:`discardingoldmessageswithfluent`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DoNotCreateQueues.cs`. Line:9. Key:`donotcreatequeues`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\EndpointName.cs`. Line:8. Key:`endpointnamefluent`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\EndpointName.cs`. Line:19. Key:`endpointnamebyattribute`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\EndpointName.cs`. Line:30. Key:`endpointnamebynamespace`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\HandlerOrdering.cs`. Line:8. Key:`handlerorderingwithfluent`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\HandlerOrdering.cs`. Line:17. Key:`handlerorderingwithfirst`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\HandlerOrdering.cs`. Line:27. Key:`handlerorderingwithmultiple`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Installers.cs`. Line:8. Key:`installers`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\InstancePerUnitOfWorkRegistration.cs`. Line:9. Key:`instanceperunitofworkregistration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\InstancePerUnitOfWorkRegistration.cs`. Line:19. Key:`unitofworkimplementation`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\InterfaceMessageCreation.cs`. Line:11. Key:`interfacemessagecreation`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\License.cs`. Line:8. Key:`license`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\PerformanceMonitoring.cs`. Line:9. Key:`performancemonitoring`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Persistence.cs`. Line:10. Key:`configurepersistence`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\PurgeOnStartup.cs`. Line:8. Key:`purgeonstartup`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\RunCustomActionReplacement.cs`. Line:8. Key:`runcustomaction`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scheduler.cs`. Line:7. Key:`scheduler`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\SendOnly.cs`. Line:9. Key:`sendonly`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Serialization.cs`. Line:10. Key:`configureserialization`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\StartupActionReplacement.cs`. Line:8. Key:`startupaction`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\StaticConfigureEndpoint.cs`. Line:8. Key:`staticconfigureendpoint`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\SubscriptionSettings.cs`. Line:9. Key:`disableautosubscribe`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\TransactionConfig.cs`. Line:11. Key:`transactionconfig`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Transports.cs`. Line:9. Key:`configuretransports`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Callback\\Callback.cs`. Line:24. Key:`callbacktoaccessmessageregistration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Callback\\Callback.cs`. Line:49. Key:`triggercallback`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Conventions\\ExpressMessages.cs`. Line:8. Key:`expressmessageconvention`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Conventions\\ExpressMessages.cs`. Line:17. Key:`expressmessageattribute`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Conventions\\MessageConventions.cs`. Line:9. Key:`messageconventions`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Conventions\\UnobtrusiveConventions.cs`. Line:4. Key:`unobtrusiveconventions`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:13. Key:`filesharedatabus`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:25. Key:`azuredatabus`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:67. Key:`messagewithlargepayload`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:77. Key:`messagewithlargepayloadusingconvention`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\DataBus\\DataBus.cs`. Line:91. Key:`definemessagewithlargepayloadusingconvention`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Distributor\\ConfiguringDistributor.cs`. Line:8. Key:`configuringdistributor`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Distributor\\ConfiguringWorker.cs`. Line:8. Key:`configuringworker`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:12. Key:`encryptionservicesimple`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:21. Key:`definingencryptedpropertiesas`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:28. Key:`messageforencryptionconvention`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:34. Key:`messagewithencryptedproperty`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:57. Key:`encryptionfromiprovideconfiguration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Encryption\\PropertyEncryption.cs`. Line:79. Key:`encryptionfromiencryptionservice`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Gateway\\GatewayConfig.cs`. Line:9. Key:`gatewayconfiguration`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Gateway\\GatewayConfig.cs`. Line:19. Key:`sendtosites`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:35. Key:`header-incoming-mutator`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:46. Key:`header-outgoing-mutator`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:56. Key:`header-incoming-handler`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Headers\\HeaderUsage.cs`. Line:69. Key:`header-outgoing-handler`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\HostIdentifier\\HostIdFixer.cs`. Line:13. Key:`hostidfixer`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Logging\\MessageToLog.cs`. Line:5. Key:`messagewithtostringlogged`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Logging\\OverrideViaProfile.cs`. Line:7. Key:`loggingconfigwithprofile`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Logging\\UsingLogging.cs`. Line:2. Key:`usinglogging`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Logging\\Log4Net\\Log4NetFiltering.cs`. Line:13. Key:`log4netfiltering`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Logging\\NLog\\NLogFiltering.cs`. Line:11. Key:`nlogfiltering`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Monitoring\\MessageFailedHandler.cs`. Line:6. Key:`messagefailedhandler`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Persistence\\NHibernate\\ConfiguringNHibernate.cs`. Line:9. Key:`configuringnhibernate`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\RavenDB\\ConfiguringTransactionRecoveryStorage.cs`. Line:11. Key:`configuringtransactionrecoverystorage`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:14. Key:`saga-without-started-by`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:61. Key:`saga-with-started-by`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:117. Key:`saga-with-started-by-and-correlation-id-set`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:317. Key:`saga-configure-self-hosted`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaBasics.cs`. Line:378. Key:`saga-data`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Sagas\\SagaMapping.cs`. Line:9. Key:`configurehowtofindsaga`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:19. Key:`scanningdefault`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:25. Key:`scanninglistofassemblies`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:31. Key:`scanningparamarrayofassemblies`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:37. Key:`scanningcustomdirectory`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:43. Key:`scanninglistoftypes`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:49. Key:`scanningexcludebyname`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:55. Key:`scanningincludebypattern`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scanning\\ScanningPublicApi.cs`. Line:61. Key:`scanningmixingincludeandexclude`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\Scheduling\\Scheduling.cs`. Line:11. Key:`scheduletask`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:13. Key:`secondlevelretriesdisable`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:19. Key:`secondlevelretriescustompolicy`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\SecondLevelRetries\\SecondLevelRetriesConfig.cs`. Line:27. Key:`secondlevelretriescustompolicyhandler`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\AdditionalServices.cs`. Line:9. Key:`testingadditionaldependencies`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\HeaderManipulation.cs`. Line:9. Key:`testingheadermanipulation`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\Saga.cs`. Line:11. Key:`testingsaga`. Version:``",
            "Duplicate key detected. File:`\\Snippets_5\\UnitTesting\\ServiceLayer.cs`. Line:9. Key:`testingservicelayer`. Version:``"
        ]
    },
}